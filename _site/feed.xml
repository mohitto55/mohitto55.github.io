<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-05T06:09:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mohitto55 Note</title><subtitle>모히또의 노트</subtitle><author><name>Mohitto55</name></author><entry><title type="html">[Visual Studio] Nuget Package Manager Console 사용 방법</title><link href="http://localhost:4000/vs/VS-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80-%EC%BD%98%EC%86%94-%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="[Visual Studio] Nuget Package Manager Console 사용 방법" /><published>2024-04-05T00:00:00+09:00</published><updated>2024-04-05T00:00:00+09:00</updated><id>http://localhost:4000/vs/VS%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%EB%A7%A4%EB%8B%88%EC%A0%80%20%EC%BD%98%EC%86%94%20%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/vs/VS-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80-%EC%BD%98%EC%86%94-%EC%82%AC%EC%9A%A9%EB%B2%95/"><![CDATA[<h2 id="들어가며">들어가며</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/66918995-af63-45b2-8696-5bbf16e1e523" alt="image" /></p>

<p>C#을 통해 작업하다보면 외부 라이브러리를 사용해야 할 경우가 있다.
마침 적당한 라이브러리가 보여서 Nuget 패키지를 통해서 찾다보면 검색이 안되는 경우가 있다. 그래서 공식 사이트에가서 설치 방법을 알아보면 저런 설치 명령어가 있는 경우가 있다.</p>

<p>필자도 Itext를 다운 받으려고 했는데 Nuget에서 Itext가 다운이 되지 않아 방법을 찾아보니 저런걸 발견했다. 결론은 C#은 ItextSharp 라는 버전을 따로 설치해야 했던 거지만 말이다.</p>

<p>아무튼 CLI에 치면 될 것 처럼 생겼는데 일반 CMD에서 치면 적용이 안된다. 해당 명령어는 Nuget Package Manager Console이라고 Visual Studio 내부 명령어 창에서 사용해야 한다.</p>

<h2 id="nuget-package-manager-console">Nuget Package Manager Console</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/b8fdf5fe-907f-43d7-8547-b980951828d3" alt="image" /></p>

<p>콘솔창을 여는 방법은 도구 &gt; Nuget 패키지 관리자 &gt; 패키지 관리자 콘솔 을 누르면 하단 솔루션 창에 입력이 가능하다.
ItextSharp 버전을 다운 받기위해 아래 명령어를 입력했다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Install-Package ItextSharp
</code></pre></div></div>

<hr />

<h3 id="결과">결과</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PM&gt; Install-Package itextsharp
C:\Users\admin\source\repos\ITEXT\ITEXT\ITEXT.csproj의 패키지를 복원하는 중...
  CACHE https://api.nuget.org/v3/vulnerabilities/index.json
  CACHE https://api.nuget.org/v3-vulnerabilities/2024.04.03.05.44.44/vulnerability.base.json
  CACHE https://api.nuget.org/v3-vulnerabilities/2024.04.03.05.44.44/2024.04.04.17.44.54/vulnerability.update.json
NuGet 패키지 itextsharp 5.5.13.3을(를) 설치하고 있습니다.
자산 파일을 디스크에 쓰는 중입니다. 경로: C:\Users\admin\source\repos\ITEXT\ITEXT\obj\project.assets.json
C:\Users\admin\source\repos\ITEXT\ITEXT\ITEXT.csproj을(를) 28밀리초 동안 복원했습니다.
ITEXT에 'BouncyCastle 1.8.9'을(를) 설치했습니다.
ITEXT에 'iTextSharp 5.5.13.3'을(를) 설치했습니다.
Nuget 작업 실행 시간: 83밀리초
경과 시간: 00:00:00.1162594
</code></pre></div></div>
<p>결과적으론 잘 다운되어 적용된다.</p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://narup.tistory.com/123">https://narup.tistory.com/123</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="vs" /><category term="Visual Studio" /><category term="Nuget" /><category term="Nuget Package Manager Console" /><category term="WSL2" /><category term="C#" /><summary type="html"><![CDATA[들어가며]]></summary></entry><entry><title type="html">[Ubuntu] Docker 설치하기</title><link href="http://localhost:4000/linux/Docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[Ubuntu] Docker 설치하기" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/linux/Docker%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/linux/Docker-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="도커-다운받기">도커 다운받기</h2>
<h3 id="1-우분투-시스템-패키지-업데이트">1. 우분투 시스템 패키지 업데이트</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get update
</code></pre></div></div>

<h3 id="2-필요한-패키지-설치">2. 필요한 패키지 설치</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
</code></pre></div></div>

<h3 id="3-docker의-공식-gpg키를-추가">3. Docker의 공식 GPG키를 추가</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</code></pre></div></div>

<h3 id="4-docker의-공식-apt-저장소를-추가">4. Docker의 공식 apt 저장소를 추가</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
</code></pre></div></div>

<h3 id="5-시스템-패키지-업데이트">5. 시스템 패키지 업데이트</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get update
</code></pre></div></div>

<h3 id="6-docker-설치">6. Docker 설치</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install docker-ce docker-ce-cli containerd.io
</code></pre></div></div>

<h3 id="7-docker가-설치-확인">7. Docker가 설치 확인</h3>
<p>7-1 도커 버전 확인</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker -v
</code></pre></div></div>

<p>7-2 도커 실행상태 확인</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl status docker
</code></pre></div></div>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://may9noy.tistory.com/392">https://may9noy.tistory.com/392</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="linux" /><category term="Window" /><category term="Linux" /><category term="Ubuntu" /><category term="WSL2" /><category term="Window Service for Linux" /><category term="Docker" /><category term="도커" /><category term="우분투" /><category term="윈도우" /><category term="리눅스" /><summary type="html"><![CDATA[도커 다운받기 1. 우분투 시스템 패키지 업데이트 sudo apt-get update]]></summary></entry><entry><title type="html">[Ubuntu] Docker 삭제하기</title><link href="http://localhost:4000/linux/Docker-%EC%99%84%EC%A0%84-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[Ubuntu] Docker 삭제하기" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/linux/Docker%20%EC%99%84%EC%A0%84%20%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/linux/Docker-%EC%99%84%EC%A0%84-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0/"><![CDATA[<h1 id="docker-삭제하기">Docker 삭제하기</h1>
<h2 id="1-docker-설치-확인하기">1. docker 설치 확인하기</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dpkg -l | grep -i docker
</code></pre></div></div>

<h2 id="2-docker를-삭제">2. docker를 삭제</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get purge -y docker-engine docker docker.io docker-ce
sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce
</code></pre></div></div>
<p>위의 명령으로 호스트에서 이미지, 컨테이너, 볼륨 또는 사용자 생성 구성 파일을 제외한 모든 파일을 삭제한다.</p>

<h2 id="3-모든-이미지-컨테이너-및-볼륨을-삭제">​3. 모든 이미지, 컨테이너 및 볼륨을 삭제</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo rm -rf /var/lib/docker /etc/docker
sudo rm /etc/apparmor.d/docker
sudo groupdel docker
sudo rm -rf /var/run/docker.sock
</code></pre></div></div>
<p>시스템에서 Docker를 완전히 제거,</p>

<hr />

<h3 id="우분투에서-삭제하기">우분투에서 삭제하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo snap remove docker
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo find / -name "*docker*" -exec `rm -rf` {} +
</code></pre></div></div>
<p>모든 docker 관련 파일을 삭제</p>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://may9noy.tistory.com/392">https://may9noy.tistory.com/392</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="linux" /><category term="Window" /><category term="Linux" /><category term="Ubuntu" /><category term="WSL2" /><category term="Window Service for Linux" /><category term="Docker" /><category term="도커" /><category term="우분투" /><category term="윈도우" /><category term="리눅스" /><summary type="html"><![CDATA[Docker 삭제하기 1. docker 설치 확인하기 dpkg -l | grep -i docker]]></summary></entry><entry><title type="html">[Math] 데카르트 좌표계와 극 좌표계</title><link href="http://localhost:4000/math/%EC%A2%8C%ED%91%9C%EA%B3%84-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[Math] 데카르트 좌표계와 극 좌표계" /><published>2024-03-25T00:00:00+09:00</published><updated>2024-03-25T00:00:00+09:00</updated><id>http://localhost:4000/math/%EC%A2%8C%ED%91%9C%EA%B3%84%20%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="http://localhost:4000/math/%EC%A2%8C%ED%91%9C%EA%B3%84-%EC%A0%95%EB%A6%AC/"><![CDATA[<h2 id="들어가기">들어가기</h2>
<p>좌표는 우리 일상 생활에서 중요한 요소다. 사람과의 거리, 건축, 컴퓨터 등 다양한 분야에서 사용하는 개념이다. 좌표계는 고대에도 사용된 개념인데 천문학자들이 별의 위치를 추정하기 위하여 사용하곤 했다.</p>

<p>오늘은 우리 일상과 빠트릴 수 없는 좌표계에 대하여 알아볼 것이다.</p>
<h2 id="좌표계란">좌표계란</h2>
<ul>
  <li>공간에 대해서 위치를 숫자나 가하학 요소를 이용해 나타낸 것이다</li>
</ul>

<h2 id="데카르트-좌표계cartesian-coordinate-system">데카르트 좌표계(Cartesian coordinate system)</h2>
<ul>
  <li>좌표평명의 2D좌표계다</li>
  <li>
    <p>2차원 평면에서 X,Y축 한쌍으로 표현</p>
  </li>
  <li>사분면
    <ul>
      <li>1사분면 : X값이 +, Y값이 +인 사분면</li>
      <li>2사분면 : X값이 -, Y값이 +인 사분면</li>
      <li>3사분면 : X값이 -, Y값이 -인 사분면</li>
      <li>4사분면 : X값이 +, Y값이 -인 사분면</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="게임서의-2차원-좌표계">게임서의 2차원 좌표계</h3>

<ul>
  <li>2D 게임의 일반 좌표계</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/a1349719-a21d-41c8-9938-8f8e6a577bcd" alt="image" /><em>그래픽 라이브러리 별 UV 좌표</em></p>

<ul>
  <li>UV 좌표계
    <ul>
      <li>맵핑 - 메쉬에 텍스쳐를 입힐 때 사용한다.</li>
      <li>기획자랑 얘기하여 좌표계를 정해야 한다.</li>
      <li>일반 좌표계로 바꿔 만들면 음수가 생길 수 있다.</li>
      <li>기획자와 뒤집힌 좌표계로 할지 일반 좌표계로 할지 정해야 한다.</li>
      <li>변경하면 수를 변형할 함수 제작 필요</li>
    </ul>
  </li>
  <li>데카르트 좌표계
    <ul>
      <li>좌표공간 3차원 좌표계</li>
      <li>x,y,z축을 한 쌍으로 표현 (x,y,z)</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="왼손좌표계-오른손-좌표계">왼손좌표계 오른손 좌표계</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/49fc4103-b66f-43fe-ae14-a7d04b9e295d" alt="image" /></p>

<ul>
  <li>엄지, 검지, <strong>중지</strong>는 각각 X Y Z 를 바라보게 한다.</li>
  <li>중지의 방향만 바꿔준다</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/c5479b25-00cf-4ef2-b809-29a1d65c1d89" alt="image" /><em>엔진별 좌표계</em></p>

<ul>
  <li>게임 엔진에 따라서 다르다</li>
  <li>왼손 좌표계 - Unity, DirectX UnreaEngine</li>
  <li>오른손 좌표계 - OpenGL, 3DSMax</li>
  <li>좌표계가 서로 다른 이유는 OpenGL이 먼저 나왔는데 다렉, 유니티는 게임 개발 친화적으로 좌표를 바꿔서 그렇다</li>
</ul>

<hr />

<h3 id="좌표계-회전하기">좌표계 회전하기</h3>
<p>좌표계 회전하기
바꿀려는 좌표계의 손 좌표계를 설정한다.
손 좌표계를 기준으로 손이 감기는 방향 생각하기
<strong>엄지</strong>를 기준으로 회전축 잡기</p>

<h2 id="극좌표계">극좌표계</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/ccd0da52-3c34-40ed-a354-a7cb62685321" alt="image" /></p>

<ul>
  <li>2D 평면상의 점의 위치를 원점과 거리와 X축 각도만 이용해 점의 위치 표현
    <ul>
      <li>원점과의 거리 = r</li>
      <li>X각도 = \(\theta\)</li>
      <li>(r, \(\theta\))</li>
    </ul>
  </li>
</ul>

<h3 id="극좌표계-요소-구하기">극좌표계 요소 구하기</h3>

\[r = \sqrt{x^{2} + y^{2}}\]

\[\theta = atan2(y,x)\]

<h3 id="데카르드-좌표계-요소-구하기">데카르드 좌표계 요소 구하기</h3>

\[x = r * cos\theta\]

\[y = r* sin\theta\]]]></content><author><name>Mohitto55</name></author><category term="math" /><category term="데카르트 좌표계" /><category term="Cartesian coordinate system" /><category term="극 좌표계" /><category term="Polar coordinate system" /><summary type="html"><![CDATA[들어가기 좌표는 우리 일상 생활에서 중요한 요소다. 사람과의 거리, 건축, 컴퓨터 등 다양한 분야에서 사용하는 개념이다. 좌표계는 고대에도 사용된 개념인데 천문학자들이 별의 위치를 추정하기 위하여 사용하곤 했다.]]></summary></entry><entry><title type="html">[C++] 백준 17396번-백도어</title><link href="http://localhost:4000/boj/BOJ-17396%EB%B2%88/" rel="alternate" type="text/html" title="[C++] 백준 17396번-백도어" /><published>2024-03-24T00:00:00+09:00</published><updated>2024-03-24T00:00:00+09:00</updated><id>http://localhost:4000/boj/BOJ%2017396%EB%B2%88</id><content type="html" xml:base="http://localhost:4000/boj/BOJ-17396%EB%B2%88/"><![CDATA[<div class="callout-info-expanded">
<div class="callout-header">문제 링크</div>
<p>
<a href="https://www.acmicpc.net/problem/17396">BOJ 17396-백도어</a>
</p>
</div>

<h2 id="문제">문제</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/13b609a3-b587-4aed-b877-3d505e0b44c1" alt="image" /></p>

<div class="code-block1">
예제 입력1
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>5 7
0 0 0 1 1
0 1 7
0 2 2
1 2 4
1 3 3
1 4 6
2 3 2
3 4 1</code></pre></div></div></div>

<div class="code-block2">
에제 출력1
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>12</code></pre></div></div></div>

<div class="code-block1">
예제 입력2
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>5 7
0 1 0 1 1
0 1 7
0 2 2
1 2 4
1 3 3
1 4 6
2 3 2
3 4 1</code></pre></div></div></div>

<div class="code-block2">
에제 출력2
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>-1</code></pre></div></div></div>

<h2 id="풀이">풀이</h2>
<p><strong>다익스트라 알고리즘</strong>을 이용하면 쉽게 풀 수 있는 문제다.</p>

<p>다만 자료형 종류의 크기를 주의해야 하는데 다른 노드로 이동하는데 드는 최대 가중치가 100000이고 모든 노드를 한번씩 돈다 가정하면 100000번을 도는 것이니 <strong>100000 * 100000</strong> 이 최대 거리가 된다. 그렇기에 <strong>int</strong> 자료형으로 거리를 기록하면 문제를 틀리게 될것이다.</p>

<h2 id="소스코드">소스코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"bits/stdc++.h"</span><span class="cp">
#define ll long long
#define MAX 1000000000000
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">region</span><span class="p">[</span><span class="mi">100005</span><span class="p">];</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">adj</span><span class="p">(</span><span class="mi">100005</span><span class="p">);</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">Dijkstra</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">ll</span><span class="o">&gt;</span> <span class="n">dst</span><span class="p">(</span><span class="mi">100005</span><span class="p">,</span> <span class="n">MAX</span><span class="p">);</span>
	<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
	<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">a</span><span class="p">));</span>
	<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
		<span class="n">ll</span> <span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
		<span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">region</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">dst</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">value</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="p">{</span>
				<span class="k">continue</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="p">)</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">dst</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
		

		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
			<span class="n">ll</span> <span class="n">nValue</span> <span class="o">=</span> <span class="n">adj</span><span class="p">[</span><span class="n">now</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">second</span> <span class="o">+</span> <span class="n">value</span><span class="p">;</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">nValue</span> <span class="o">&lt;</span> <span class="n">dst</span><span class="p">[</span><span class="n">next</span><span class="p">])</span> <span class="p">{</span>
				<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="n">nValue</span><span class="p">,</span> <span class="n">next</span><span class="p">));</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">MAX</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">dst</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">region</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">t</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>

		<span class="n">adj</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">t</span><span class="p">));</span>
		<span class="n">adj</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">t</span><span class="p">));</span>
	<span class="p">}</span>
	<span class="n">Dijkstra</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Mohitto55</name></author><category term="boj" /><category term="boj" /><category term="백준" /><category term="PS" /><category term="solved" /><category term="문제풀이 17396번" /><category term="Dijkstra" /><category term="다익스트라" /><summary type="html"><![CDATA[문제 링크 BOJ 17396-백도어]]></summary></entry><entry><title type="html">[Docker] Ubuntu에서 Docker 설치하기</title><link href="http://localhost:4000/network/Docker%EC%97%90-MySql-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[Docker] Ubuntu에서 Docker 설치하기" /><published>2024-03-22T00:00:00+09:00</published><updated>2024-03-22T00:00:00+09:00</updated><id>http://localhost:4000/network/Docker%EC%97%90%20MySql%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/network/Docker%EC%97%90-MySql-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="docker">Docker</h2>
<p>Docker란 컨테이너를 이용한 오픈소스 가상화 플랫폼이다. 
컨테이너는 OS레벨의 가상화로 프로세스를 격리시켜 동작하는 것을 말한다. OS자체를 가상화 하던 방식과는 다른데 무슨 차이가 있는 것일 까</p>

<h2 id="vm-가상화-vs-docker-가상화">VM 가상화 vs Docker 가상화</h2>

<h2 id="사용하는-이유">사용하는 이유</h2>
<p>개발하고 서버에 올리면 끝
그런데 서버에 올리면 작동 안함
whyt 컴터는 윈도우, 서버는 리눅스여서
도커를 사용하면 다른 머신에서도 같은 환경 구성 가능</p>

<p>윈도우, 서버에 둘다 Docker 설치
구성하고 싶은 환경 설정하면 됨</p>

<p>도커는 파일읽고 필요한걸 다운 받고
같은 환경을 컨테이너에 구성함</p>

<p>그래서 컴에서 서버로 코드 업로드하면(Docker와 같이) 잘 작동 함</p>

<p>또 각 컨테이너는 각기 분리되어 있음
컨테이너들은 독립적임
이덕에 한개의 서버에서 수많은 컨테이너 가질 수 있음</p>

<p>만약 자바 애플리케이션이 인기 많으면 자바 컨테이너 늘리고 인기 줄면 줄이고 가능
매번 서버를 사고 팔 이유가 없음</p>

<ol>
  <li>원하는 개발 환경을 파일에 저장하면 어떤 머신에든 해당 환경 구성해줌</li>
  <li>각 환경을 독립적이기 때문에 무슨 환경이든 모듈식 관리 가능</li>
</ol>

<h2 id="docker-이미지">Docker 이미지</h2>
<p>컨테이너를 만드는데 사용되는 Template</p>

<h2 id="mysql">MySQL</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker -v
</code></pre></div></div>
<blockquote>
  <p>Docker 버전 확인</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull mysql
</code></pre></div></div>
<blockquote>
  <p>Docker 이미지 다운</p>
</blockquote>

<p><img src="https://github.com/mohitto55/Blog_Images/assets/154340583/5c72a46d-5327-48a0-bfbe-c5e80a298495" alt="image" /></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://hipopatamus.tistory.com/109">https://hipopatamus.tistory.com/109</a>
<a href="https://khj93.tistory.com/entry/Docker-Docker-%EA%B0%9C%EB%85%90">https://khj93.tistory.com/entry/Docker-Docker-%EA%B0%9C%EB%85%90</a>
<a href="https://www.youtube.com/watch?v=chnCcGCTyBg">https://www.youtube.com/watch?v=chnCcGCTyBg</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="network" /><category term="Docket" /><category term="Ubuntu" /><category term="Linux" /><category term="컨테이너" /><summary type="html"><![CDATA[Docker Docker란 컨테이너를 이용한 오픈소스 가상화 플랫폼이다. 컨테이너는 OS레벨의 가상화로 프로세스를 격리시켜 동작하는 것을 말한다. OS자체를 가상화 하던 방식과는 다른데 무슨 차이가 있는 것일 까]]></summary></entry><entry><title type="html">[Window] Window에서 Linux(WSL2) 환경 설치하기</title><link href="http://localhost:4000/os/WSL2-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[Window] Window에서 Linux(WSL2) 환경 설치하기" /><published>2024-03-22T00:00:00+09:00</published><updated>2024-03-22T00:00:00+09:00</updated><id>http://localhost:4000/os/WSL2%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/os/WSL2-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/"><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>Docker를 사용하기 위해 알아보던 중 Hyper-V 기능을 활성화 해야하는 것을 알았다. 활성화 하려고 했지만 아무리 찾아도 보이지 않았다. 어찌된 것인지 알아보니 Window Pro 이상의 버전만 지원하는 기능이였고 난 Home였기에 할 수 없었다.</p>

<p>어떻게든 방법을 찾던 와중 Window에서 Linux 환경을 실행할 수 있는 기능이 있었고 이를 이용하면 Docker도 설치할 수 있다는 것을 알았다.</p>

<h2 id="wsl2">WSL2</h2>
<p>WSL2(Window Service for Linux)는 Window에서 <strong>Linux Vritual Machine</strong> 환경을 구성할 수 있게 해주는 기능이다. MS에서 지원하는 기능으로 과거에 비해 제약이 많이 줄어 Window 환경만 최신으로 해놨다면 큰 무리 없이 설치할 수 있을 것이다.</p>

<hr />

<h3 id="설치하기">설치하기</h3>
<p>우선 제어판 &gt; 프로그램 &gt; Windows 기능 켜기/끄기 에서 Linux용 Windows 하위 시스템을 활성화한다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/c7cfecd1-3618-42a2-b85e-a611e472df2a" alt="스크린샷 2024-03-22 223031" /></p>

<p>그 후 PowerShell을 관리자 권한으로 실행시킨다.</p>

<p>아래 명령어를 입력해 WSL을 설치한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl --install
</code></pre></div></div>

<hr />

<p>그러고 난 후 재부팅을 하고 나면 자동으로 Ubuntu가 설치되고 있을 것이다.</p>

<p>그렇지 않다면 PowerShell에서 아래 명령어를 입력한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl --install -d Ubuntu
</code></pre></div></div>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/6be99b3f-7460-4fb1-ac05-c316519b24e6" alt="스크린샷 2024-03-22 223448" /></p>

<h2 id="마무리">마무리</h2>
<p>이것으로 Window에서 Linux 환경을 구성했다. 이것으로 Docker를 이용한 다양한 프로젝트를 진행해볼 것이다.</p>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://docs.docker.com/desktop/wsl/">https://docs.docker.com/desktop/wsl/</a>
<a href="https://velog.io/@darktrace1/%EC%9C%88%EB%8F%84%EC%9A%B011%EC%97%90-UbuntuWSL2-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">https://velog.io/@darktrace1/%EC%9C%88%EB%8F%84%EC%9A%B011%EC%97%90-UbuntuWSL2-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="os" /><category term="Window" /><category term="Linux" /><category term="Ubuntu" /><category term="WSL2" /><category term="Window Service for Linux" /><category term="우분투" /><category term="윈도우" /><category term="리눅스" /><summary type="html"><![CDATA[들어가며 Docker를 사용하기 위해 알아보던 중 Hyper-V 기능을 활성화 해야하는 것을 알았다. 활성화 하려고 했지만 아무리 찾아도 보이지 않았다. 어찌된 것인지 알아보니 Window Pro 이상의 버전만 지원하는 기능이였고 난 Home였기에 할 수 없었다.]]></summary></entry><entry><title type="html">[Algorithm] Selection Sort 선택정렬 알고리즘</title><link href="http://localhost:4000/algorithm/Selection-Sort-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC/" rel="alternate" type="text/html" title="[Algorithm] Selection Sort 선택정렬 알고리즘" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Selection%20Sort%20%EC%84%A0%ED%83%9D%20%EC%A0%95%EB%A0%AC</id><content type="html" xml:base="http://localhost:4000/algorithm/Selection-Sort-%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC/"><![CDATA[<h2 id="selection-sort">Selection Sort</h2>
<p>선택정렬 알고리즘은 제자리 정렬 알고리즘 중 하나로 입력 데이터 외 추가 데이터가 필요하지 않은 알고리즘이다.</p>

<h2 id="원리">원리</h2>
<ul>
  <li>정렬하고자 하는 데이터 중 가장 큰 데이터의 맨 끝 데이터랑 교환
    <ol>
      <li>0번 째 Index부터 N-i까지 차례로 순회한다.</li>
      <li>순회를 하던 중 값이 Index &lt; Index +1 일 경우 가장 큰 값을 Index + 1이라 한다.</li>
      <li>순회를 마쳤으면 마지막 값이랑 <font color="dodgerred">가장 큰 값</font>이랑 교환한다.</li>
      <li>i를 1 올리고 다시 0부터 순회한다.</li>
    </ol>
  </li>
</ul>

<h2 id="시간-복잡도">시간 복잡도</h2>

\[(n-1) + (n-2)... = \frac{n(n-1)}{2} = O(N^2)\]

<ul>
  <li>비교 횟수
    <ul>
      <li>i가 n-2 일 때 비교횟수 : <font color="dodgerred">n-2</font></li>
      <li>i가 n-1 일 때 비교횟수 : <font color="dodgerred">n-1</font></li>
      <li>i가 1 일 때 비교횟수 : <font color="dodgerred">1</font></li>
    </ul>
  </li>
  <li>교환 횟수
    <ul>
      <li>외부 루프의 실행 횟수와 동일</li>
      <li>Swap시 3번의 데이터 이동 발생</li>
    </ul>
  </li>
</ul>

<h2 id="코드">코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">void</span> <span class="nf">SelectionSort</span><span class="p">(){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">last</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">last</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">largestIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="n">last</span><span class="p">;</span> <span class="n">cur</span><span class="o">++</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">largestIndex</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="p">]){</span>
				<span class="n">largestIndex</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">swap</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">largestIndex</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="p">]);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://gmlwjd9405.github.io/2018/05/06/algorithm-selection-sort.html">https://gmlwjd9405.github.io/2018/05/06/algorithm-selection-sort.html</a>
<a href="https://ko.wikipedia.org/wiki/%EC%84%A0%ED%83%9D_%EC%A0%95%EB%A0%AC">https://ko.wikipedia.org/wiki/%EC%84%A0%ED%83%9D_%EC%A0%95%EB%A0%AC</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="algorithm" /><category term="Algorighm" /><category term="Sort" /><category term="정렬" /><category term="Selection Sort" /><category term="선택정렬" /><summary type="html"><![CDATA[Selection Sort 선택정렬 알고리즘은 제자리 정렬 알고리즘 중 하나로 입력 데이터 외 추가 데이터가 필요하지 않은 알고리즘이다.]]></summary></entry><entry><title type="html">[Algorithm] Bubble Sort 버블정렬 알고리즘</title><link href="http://localhost:4000/algorithm/Bubble-Sort-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC/" rel="alternate" type="text/html" title="[Algorithm] Bubble Sort 버블정렬 알고리즘" /><published>2024-03-19T00:00:00+09:00</published><updated>2024-03-19T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Bubble%20Sort%20%EB%B2%84%EB%B8%94%20%EC%A0%95%EB%A0%AC</id><content type="html" xml:base="http://localhost:4000/algorithm/Bubble-Sort-%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC/"><![CDATA[<h2 id="bubble-sort">Bubble Sort</h2>
<p>버블 정렬 알고리즘은 정렬 알고리즘 중 하나로 느리지만 간단하여 자주 쓰이는 알고리즘이다.</p>

<h2 id="원리">원리</h2>
<ul>
  <li>Index 0 부터 시작해서 n-i까지 비교해 자신 보다 작은 값을 보면 Swap</li>
  <li>한 회차에 한번도 정렬이 안됐으면 정렬을 종료한다.</li>
</ul>

<h2 id="시간-복잡도">시간 복잡도</h2>

\[(n-1) + (n-2)... = \frac{n(n-1)}{2} = O(N^2)\]

<ul>
  <li>비교 횟수
    <ul>
      <li>i가 n-2 일 때 비교횟수 : <font color="dodgerred">n-2</font></li>
      <li>i가 n-1 일 때 비교횟수 : <font color="dodgerred">n-1</font></li>
      <li>i가 1 일 때 비교횟수 : <font color="dodgerred">1</font></li>
    </ul>
  </li>
  <li>교환 횟수
    <ul>
      <li>모두 정렬 되어 있을 경우 횟수 0</li>
      <li>평균 \(\frac{3n(n-1)}{4}\)</li>
    </ul>
  </li>
</ul>

<h2 id="코드">코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">void</span> <span class="nf">BubbleSort</span><span class="p">(){</span>
	<span class="kt">bool</span> <span class="n">sorting</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">last</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">sorting</span> <span class="o">==</span> <span class="nb">true</span><span class="p">);</span> <span class="n">last</span><span class="o">++</span><span class="p">){</span>
		<span class="n">sorting</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cur</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="n">last</span><span class="p">;</span> <span class="n">cur</span><span class="o">++</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
				<span class="n">swap</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">cur</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
				<span class="n">sorting</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://ko.wikipedia.org/wiki/%EB%B2%84%EB%B8%94_%EC%A0%95%EB%A0%AC">https://ko.wikipedia.org/wiki/%EB%B2%84%EB%B8%94_%EC%A0%95%EB%A0%AC</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="algorithm" /><category term="Algorighm" /><category term="Sort" /><category term="정렬" /><category term="Bubble Sort" /><category term="버블정렬" /><summary type="html"><![CDATA[Bubble Sort 버블 정렬 알고리즘은 정렬 알고리즘 중 하나로 느리지만 간단하여 자주 쓰이는 알고리즘이다.]]></summary></entry><entry><title type="html">[Unity] Private Repository 패키지를 UPM를 이용한 업데이트 방법</title><link href="http://localhost:4000/unity/%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80/" rel="alternate" type="text/html" title="[Unity] Private Repository 패키지를 UPM를 이용한 업데이트 방법" /><published>2024-03-15T00:00:00+09:00</published><updated>2024-03-15T00:00:00+09:00</updated><id>http://localhost:4000/unity/%ED%8C%A8%ED%82%A4%EC%A7%80%20%EB%A7%A4%EB%8B%88%EC%A0%80</id><content type="html" xml:base="http://localhost:4000/unity/%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80/"><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>Unity를 이용하다 보니 생산성을 위해 여러가지 모듈을 개발하곤 한다. 나는 만들어진 <strong>모듈</strong>을 GitHub에 올리고 그것을 필요한 프로젝트에서 다시 다운 하는 방식으로 사용하고 있었다.</p>

<p>하지만 이런 방식은 너무 번거롭고 버전관리도 제대로 되지 않아 자동으로 관리할 수 있는 기능을 원했고 그렇게 찾은 것이 <strong>UPM</strong> 기능이다. UPM을 이용하여 Private 한 Repository에 접근해 개발 관리를 쉽게하는 <strong>CI/CD</strong>를 개발 할 것이다.</p>

<h2 id="package-manager">Package Manager</h2>
<p>유니티에는 패키지 매니저라고 하는 기능이 있다. 이는 유니티 프로젝트에 필요한 다양한 패키지를 관리하고 설치할 수 있는 기능이다.</p>

<p>이를 이용하면 번거롭게 GitHub에서 수동으로 다운 받고 사용할 일안하고 자동화를 할 수 있을 것으로 보인다. 작성한 코드를 Registry에 업로드하면 <strong>Github Action</strong>으로 연동을 해 버전을 업데이트 할 수 있다. 이런 모듈은 <strong>AssetStore</strong>처럼 다운받고 사용 할 수 있다.</p>

<p>이 글에서는 GitHub Action은 사용하지 않고 배포하는 법에 대해 쓴다.</p>

<h2 id="1-unity-설정">1. Unity 설정</h2>
<h3 id="1-1-패키지-만드는-법">1-1. 패키지 만드는 법</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f35905b7-b06b-4cd5-84c8-d10ba68c89b1" alt="image" /></p>
<ol>
  <li>패키지 폴더 열기</li>
  <li>패키지 안에 커스텀 패키지 폴더 만들기</li>
  <li>패키지와 해당 종속성 설명하는 <code class="language-plaintext highlighter-rouge">package.json</code> 필요</li>
  <li><code class="language-plaintext highlighter-rouge">package.json</code> 양식 작성하기
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "name": "com.[company-name].[package-name]",
  "version": "1.2.3",
  "displayName": "Package Example",
  "description": "This is an example package",
  "unity": "2019.1",
  "unityRelease": "0b5",
  "documentationUrl": "https://example.com/",
  "changelogUrl": "https://example.com/changelog.html",
  "licensesUrl": "https://example.com/licensing.html",
  "dependencies": {
 "com.[company-name].some-package": "1.0.0",
 "com.[company-name].other-package": "2.0.0"
 },
 "keywords": [
 "keyword1",
 "keyword2",
 "keyword3"
  ],
  "author": {
 "name": "Unity",
 "email": "unity@example.com",
 "url": "https://www.unity3d.com"
  }
}
</code></pre></div>    </div>
  </li>
</ol>

<hr />
<h3 id="1-2-패키지-폴더-구조-및-방법">1-2. 패키지 폴더 구조 및 방법</h3>
<p>에셋을 패키지화 하기 위해선 우선 유니티에서 <a href="https://docs.unity3d.com/Manual/cus-layout.html">지정한 규격</a>에 맞춰 패키지 폴더를 구성해야 한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;package-root&gt;
  ├── package.json
  ├── README.md
  ├── CHANGELOG.md
  ├── LICENSE.md
  ├── Third Party Notices.md
  ├── Editor
  │   ├── &lt;company-name&gt;.&lt;package-name&gt;.Editor.asmdef
  │   └── EditorExample.cs
  ├── Runtime
  │   ├── &lt;company-name&gt;.&lt;package-name&gt;.asmdef
  │   └── RuntimeExample.cs
  ├── Tests
  │   ├── Editor
  │   │   ├── &lt;company-name&gt;.&lt;package-name&gt;.Editor.Tests.asmdef
  │   │   └── EditorExampleTest.cs
  │   └── Runtime
  │        ├── &lt;company-name&gt;.&lt;package-name&gt;.Tests.asmdef
  │        └── RuntimeExampleTest.cs
  ├── Samples~
  │        ├── SampleFolder1
  │        ├── SampleFolder2
  │        └── ...
  └── Documentation~
       └── &lt;package-name&gt;.md
</code></pre></div></div>

<hr />

<h3 id="1-3-폴더에-패키지-파일-넣기">1-3. 폴더에 패키지 파일 넣기</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f35905b7-b06b-4cd5-84c8-d10ba68c89b1" alt="image" /><em>meta 파일도 모두 있어야한다.</em></p>

<p>깃허브 Repository 에 올릴 파일들은 패키지 폴더 안에 패키지와 관련 된 모든 파일을 규격에 따라 넣는다. 또한 파일탐색기로 이동했을 때 파일들의 <font color="dodgerred">metafile</font>들이 모두 생성 되어 있는지 확인해야 한다.</p>

<hr />
<h3 id="1-4-manifestjson-파일-설정">1-4. manifest.json 파일 설정</h3>
<p>Packages/manifest.json 파일 편집해 해당 종속성을 설명해야 한다.</p>

<hr />
<h3 id="1-5-asmdef-생성">1-5. asmdef 생성</h3>
<p>패키지에 Script가 있으면 내 Script를 패키지 내 Script와 연결 해야한다.
스크립트에 대응하는 asmdef 유형의 어셈블리 정의 파일을 생성한다.</p>

<p>asmdef파일은 <a href="https://docs.unity3d.com/Manual/cus-asmdef.html">네이밍 컨벤션</a>을 따라 이름을 작성해야 한다. 예를 들어 Runtime 폴더 내에 있는 스크립트에 대응하는 asmdef는</p>

<p><code class="language-plaintext highlighter-rouge">&lt;company-name&gt;.&lt;package-name&gt;.Editor.Tests.asmdef</code> 와 같이 작성해야 한다.</p>

<div class="callout-info-expanded">
<div class="callout-header">asmdef파일</div>
<p>
닷넷 생태계의 C프로젝트와 동일한 단일체이다.
</p>
</div>

<hr />
<h3 id="1-6-라이센스-관련-파일-설정하기">1-6. 라이센스 관련 파일 설정하기</h3>
<p>법적 문제가 생기지 않게 <code class="language-plaintext highlighter-rouge">Third Party Notices.md</code>, <code class="language-plaintext highlighter-rouge">LICENSE.md</code> 파일을 생성하는 것이 좋다.</p>

<p>관련 문서 : <a href="https://docs.unity3d.com/Manual/cus-legal.html">https://docs.unity3d.com/Manual/cus-legal.html</a></p>

<p><code class="language-plaintext highlighter-rouge">LICENSE.md</code> 파일 작성법</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unity Timeline copyright © 2017-2019 Unity Technologies ApS

Licensed under the Unity Companion License for Unity-dependent projects--see [Unity Companion License](http://www.unity3d.com/legal/licenses/Unity_Companion_License).

Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions.
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Third Party Notices.md</code> 파일 작성법</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This package contains third-party software components governed by the license(s) indicated below:

Component Name: Semver

License Type: "MIT"

[SemVer License](https://github.com/myusername/semver/blob/master/License.txt)

Component Name: MyComponent

License Type: "MyLicense"

[MyComponent License](https://www.mycompany.com/licenses/License.txt)

</code></pre></div></div>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Third Party Notices.md</code> 에서는 라이센스 타입을 작성해 줘야 한다. 자신의 목적에 맞는 적절한 라이센스를 선택해서 넣는다.</p>
</blockquote>

<p>상세한 라이센스 설명 링크 - <a href="https://olis.or.kr/license/compareGuide.do">오픈소스SW 라이선스 종합정보시스템</a></p>

<p>주요한 라이센스 두개를 소개하자면</p>
<ul>
  <li>MIT - 오픈소스, 상업적 이용 원하면 고르면 안된다.</li>
  <li>
    <font color="dodgerred">GPL</font>
    <font> - GPL 소스를 조금만 사용해도 모든 소스 공개해야한다.</font>
  </li>
</ul>

<h2 id="2-repository-설정">2. Repository 설정</h2>
<h3 id="2-1-패키지-repository에-올리기-준비">2-1 패키지 Repository에 올리기 준비</h3>
<p>repository에 접근하는 방법은 두가지가 있는데 HTTPS, SSH 중 하나로 불러올 수 있다. 둘다 장단점이 있다.</p>
<ul>
  <li><strong>HTTPS</strong> - 로그인마다 이름과 비번 적어야 한다.
    <ul>
      <li>UPM이 깃에서 패키지 가져올 때 사용자 자격 증명 입력할 단말이 없어 깃이 UPM에 오류를 보고 한다.</li>
    </ul>
  </li>
  <li><strong>SSH</strong> - 접근시 파일이 내부에 생성되 보안 이슈가 생긴다.</li>
</ul>

<p>나는 <strong>HTTPS</strong>로 선택 했는데 이유는 보안 이슈와 <strong>Git Credential Manager</strong>을 이용해 로그인시 이름과 패스워드를 작성 안해도 되게 만들 수 있기 때문이다.</p>

<hr />
<h3 id="2-2-github-repository-만들기">2-2. GitHub Repository 만들기</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/0848fc1d-14e0-493b-be3a-f8de85e1cf54" alt="image" /><em>Repository 설정</em></p>

<p>패키지 배포용 Repository를 새로 설정하고 만든다.</p>
<ol>
  <li>Private 설정</li>
  <li>리드미 넣기
 2-1. Readme.md의 메타파일도 필요하기에 로컬과 연동시키면 Unity를 켜 만들어준다.</li>
  <li>Unity gitignore 지정</li>
  <li>라이센스는 이미 <code class="language-plaintext highlighter-rouge">LICENSE.md</code> 만들었으니 설정하지 않는다</li>
</ol>

<hr />
<h3 id="2-3-로컬저장소-연결하기">2-3. 로컬저장소 연결하기</h3>
<p>유니티 커스텀 패키지 폴더와 원격 repository를 HTTP를 이용해 연결한다. 패키지 폴더 안에 파일이 있으면 연결이 안되는 파일들을 잠시 다른 곳에 뒀다가 연결이 되면 다시 넣는다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>
<blockquote>
  <p>.git 파일 생성</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add http
</code></pre></div></div>
<blockquote>
  <p>Http를 이용한 원격 저장소 연결</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin main
</code></pre></div></div>
<blockquote>
  <p>Readme.md 파일 등 받기</p>
</blockquote>

<hr />
<h3 id="2-4-git-credential-helper-설정">2-4. Git Credential Helper 설정</h3>
<p>HTTP로 접근시 매번 로그인 해야하는데 이걸 한번 인증으로 끝낼 수 있게 할 것이다.</p>

<p>Git - <a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Credential-%EC%A0%80%EC%9E%A5%EC%86%8C">Credential 공식 문서</a></p>

<p><a href="https://docs.unity3d.com/Manual/upm-config-https-git.html">유니티 문서</a>에 의하면 아래 두줄을 작성하면 된다.</p>

<p>Follow these steps to access packages in private repositories that use HTTPS Git URLs:
Configure Git to use GCM by running the following command in a terminal:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global credential.helper manager
</code></pre></div></div>

<p>Access the repository one time by using a terminal. For example, run the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git ls-remote --heads https://&lt;url-to-repository&gt; HEAD
</code></pre></div></div>

<hr />
<h3 id="2-5-메타파일-보이게하기">2-5. 메타파일 보이게하기</h3>
<p>만약 패키지 폴더안에 메타파일이 안보일 경우
<strong>ProjectSettings-&gt;Editor-&gt;VersionControl-&gt;Mode-&gt;Visible Meta Files</strong> 설정하기
옛날 버전에 있는 것으로 보이고 최신 버전이면 안보일 것이다.</p>

<h2 id="3-패키지-다운-받기">3. 패키지 다운 받기</h2>
<h3 id="3-1-url을-이용해-다운받기">3-1. URL을 이용해 다운받기</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f11ac87d-f036-49f7-87a4-a5336cc57432" alt="image" /></p>

<ol>
  <li>깃헙 HTTPS 저장소 주소 복사</li>
  <li>패키지 매니저 열기</li>
  <li>왼쪽 상단위 + 누르고 깃헙 으로 다운 클릭</li>
</ol>

<hr />
<h3 id="3-2-유지보수-주의점">3-2. 유지보수 주의점</h3>
<ul>
  <li>수정할 때마다 버전을 높이고 올려야한다. 아니면 변경 안된다</li>
  <li>반드시 모든 파일이 meta파일이 생성되야함. Readme도 반드시!!
    <ul>
      <li>github Action 을 이용하면 패키지 폴더만 배포할 수 있게 하여 Readme파일을 넣지 않아도 된다.</li>
    </ul>
  </li>
  <li>종속성 필요한 경우
    <ul>
      <li>package.json 종속성 추가하기</li>
      <li>Asmdef 파일 생성하고 Assembly Definition References에 사용중인 패키지 어셈블리 추가</li>
    </ul>
  </li>
</ul>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://drehzr.tistory.com/1544">https://drehzr.tistory.com/1544</a>
<a href="https://www.youtube.com/watch?v=mgsLb3TKljk">https://www.youtube.com/watch?v=mgsLb3TKljk</a>
<a href="https://flyingsquirrel.medium.com/github-license%EC%9D%98-%EC%A2%85%EB%A5%98%EC%99%80-%EB%82%98%EC%97%90%EA%B2%8C-%EB%A7%9E%EB%8A%94-%EB%9D%BC%EC%9D%B4%EC%84%A0%EC%8A%A4-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0-ae29925e8ff4">https://flyingsquirrel.medium.com/github-license%EC%9D%98-%EC%A2%85%EB%A5%98%EC%99%80-%EB%82%98%EC%97%90%EA%B2%8C-%EB%A7%9E%EB%8A%94-%EB%9D%BC%EC%9D%B4%EC%84%A0%EC%8A%A4-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0-ae29925e8ff4</a>
<a href="https://docs.unity3d.com/Manual/cus-asmdef.html">https://docs.unity3d.com/Manual/cus-asmdef.html</a>
<a href="https://docs.unity3d.com/Manual/upm-config-https-git.html">https://docs.unity3d.com/Manual/upm-config-https-git.html</a>
<a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Credential-%EC%A0%80%EC%9E%A5%EC%86%8C">https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Credential-%EC%A0%80%EC%9E%A5%EC%86%8C</a>
<a href="https://jh-bk.tistory.com/28">hhttps://jh-bk.tistory.com/28</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="unity" /><category term="Unity" /><category term="PackageManager" /><category term="UPM" /><category term="유니티" /><category term="Git" /><category term="Repository" /><category term="Git Credential Helper" /><category term="CI/CD" /><summary type="html"><![CDATA[들어가며 Unity를 이용하다 보니 생산성을 위해 여러가지 모듈을 개발하곤 한다. 나는 만들어진 모듈을 GitHub에 올리고 그것을 필요한 프로젝트에서 다시 다운 하는 방식으로 사용하고 있었다.]]></summary></entry></feed>