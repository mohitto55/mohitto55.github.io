<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-06T11:47:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mohitto55 Note</title><subtitle>모히또의 노트</subtitle><author><name>Mohitto55</name></author><entry><title type="html">[C++] 백준 12865번-평범한 배낭</title><link href="http://localhost:4000/boj/BOJ-12865%EB%B2%88/" rel="alternate" type="text/html" title="[C++] 백준 12865번-평범한 배낭" /><published>2024-03-06T00:00:00+09:00</published><updated>2024-03-06T00:00:00+09:00</updated><id>http://localhost:4000/boj/BOJ%2012865%EB%B2%88</id><content type="html" xml:base="http://localhost:4000/boj/BOJ-12865%EB%B2%88/"><![CDATA[<p><a href="https://www.acmicpc.net/problem/12865">BOJ 12865-평범한 배낭</a></p>

<h2 id="문제">문제</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/a44cd234-e6ab-416d-ba26-dc7cc217c050" alt="image" /></p>

<div class="code-block1">
예제 입력
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>4 7
6 13
4 8
3 6
5 12</code></pre></div></div></div>

<div class="code-block2">
에제 출력
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>14</code></pre></div></div></div>

<h2 id="풀이">풀이</h2>
<p>DP를 이용하는 <strong>냅색(Knapsack)</strong>문제다.</p>
<ul>
  <li>물건을 넣는 경우와 안넣는 경우 두가지에 대한 모든 경우의 수 중 무게가 k보다 안 높고 value가 가장 높은 경우를 구한다.</li>
  <li>필요없는 경우의 수를 제외하기 위해 flag[무게 합][탐색 중인 배낭 Index]의 값에 가장 높은 value값을 저장하고 만약 이 값보다 낮으면 탐색을 중단한다.</li>
</ul>

<h2 id="소스코드">소스코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"bits/stdc++.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">weight</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">value</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">flag</span><span class="p">[</span><span class="mi">100001</span><span class="p">][</span><span class="mi">101</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">DP</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">v</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">flag</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">v</span><span class="p">)</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">flag</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
	<span class="n">val</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">DP</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">v</span><span class="p">));</span>
	<span class="n">val</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">DP</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">w</span> <span class="o">+</span> <span class="n">weight</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">v</span> <span class="o">+</span> <span class="n">value</span><span class="p">[</span><span class="n">x</span><span class="p">]));</span>
	<span class="k">return</span> <span class="n">val</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">weight</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">DP</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Mohitto55</name></author><category term="boj" /><category term="boj" /><category term="백준" /><category term="solved" /><category term="문제풀이 12865번" /><category term="Knapsack" /><category term="Daynamic Programming" /><category term="DP" /><category term="C++" /><summary type="html"><![CDATA[BOJ 12865-평범한 배낭]]></summary></entry><entry><title type="html">[C++] 백준 2629번-양팔저울</title><link href="http://localhost:4000/boj/BOJ-2629%EB%B2%88/" rel="alternate" type="text/html" title="[C++] 백준 2629번-양팔저울" /><published>2024-03-06T00:00:00+09:00</published><updated>2024-03-06T00:00:00+09:00</updated><id>http://localhost:4000/boj/BOJ%202629%EB%B2%88</id><content type="html" xml:base="http://localhost:4000/boj/BOJ-2629%EB%B2%88/"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2629">BOJ 2629-양팔저울</a></p>

<h2 id="문제">문제</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/b8f27588-2419-4e33-b6a8-55f07c43faea" alt="image" /></p>

<div class="code-block1">
예제 입력1
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>2
1 4
2
3 2</code></pre></div></div></div>

<div class="code-block2">
에제 출력1
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>Y N</code></pre></div></div></div>

<div class="code-block1">
예제 입력2
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>4
2 3 3 3
3
1 4 10</code></pre></div></div></div>

<div class="code-block2">
에제 출력2
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>Y Y N</code></pre></div></div></div>

<h2 id="풀이">풀이</h2>
<p>DP를 사용하여 푸는 문제다.</p>
<ul>
  <li>구슬의 무게 + 왼쪽 추의 무게합 = 우측 추의 무게 합 이 성립될 경우 Y를 출력하라는 문제이다.</li>
  <li>그렇기에 <strong>구슬 무게 = 우측 추의 무게합 - 왼쪽 추의 무게합</strong>이 점화식이다.</li>
  <li>추를 놓는 모든 경우의 수 중 <strong>우측 추의 무게합 - 왼쪽 추의 무게합</strong>이 존재 할 경우 해당 무게와 같은 무게인 구슬이 있으면 해당 구슬은 Y를 출력할 수 있다.</li>
  <li>모든 경우의 수를 탐색할 경우 시간 초과가 발생할 수 있으므로 flag[무게합][i번 째 추]에 체크해서 중복되는 경우는 넘기도록 한다.</li>
</ul>

<h2 id="소스코드">소스코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"bits/stdc++.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">weights</span><span class="p">[</span><span class="mi">31</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">beads</span><span class="p">[</span><span class="mi">31</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">answer</span><span class="p">[</span><span class="mi">50001</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">flag</span><span class="p">[</span><span class="mi">50001</span><span class="p">][</span><span class="mi">600</span><span class="p">];</span>


<span class="kt">int</span> <span class="nf">DP</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">50000</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">abs</span><span class="p">(</span><span class="n">c</span><span class="p">)][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">answer</span><span class="p">[</span><span class="n">abs</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="n">flag</span><span class="p">[</span><span class="n">abs</span><span class="p">(</span><span class="n">c</span><span class="p">)][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

	<span class="n">DP</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">0</span><span class="p">);</span>
	<span class="n">DP</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span> <span class="o">-</span> <span class="n">weights</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
	<span class="n">DP</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="n">weights</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
	<span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">weights</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">weights</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">beads</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="n">answer</span><span class="p">[</span><span class="n">DP</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">answer</span><span class="p">[</span><span class="n">beads</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Y "</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"N "</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Mohitto55</name></author><category term="boj" /><category term="boj" /><category term="백준" /><category term="solved" /><category term="문제풀이 2629번" /><summary type="html"><![CDATA[BOJ 2629-양팔저울]]></summary></entry><entry><title type="html">[UE5] Modifires로 여러 값 반환하기</title><link href="http://localhost:4000/ue5/UE5-Unhanced-Input-IMC-%EC%84%B8%EB%B6%80%EC%84%A4%EC%A0%95/" rel="alternate" type="text/html" title="[UE5] Modifires로 여러 값 반환하기" /><published>2024-03-04T00:00:00+09:00</published><updated>2024-03-04T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20Unhanced%20Input%20IMC%20%EC%84%B8%EB%B6%80%EC%84%A4%EC%A0%95</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-Unhanced-Input-IMC-%EC%84%B8%EB%B6%80%EC%84%A4%EC%A0%95/"><![CDATA[<h2 id="enhancedinput">EnhancedInput</h2>
<p>언리얼엔진5은 기존 InputSystem을 대체하는 Enhanced Input을 이용해 더 확장성 높고 사용하기 편한 입력 시스템을 만들었다. 이 시스템 중 <code class="language-plaintext highlighter-rouge">Input Mapping Context</code>는 하나 이상의 <code class="language-plaintext highlighter-rouge">Input Action</code>을 트리거 할 수 있게 해준다.</p>

<h3 id="mapping-context-설정">Mapping Context 설정</h3>
<p><code class="language-plaintext highlighter-rouge">Mapping Context</code>가 하는 일을 나열해 보자면</p>
<ul>
  <li>키 등록 - 어떤 키를 입력해야 <code class="language-plaintext highlighter-rouge">InputAction</code>이 실행되는지 설정</li>
  <li><code class="language-plaintext highlighter-rouge">Trigger</code> - 특정 키를 홀딩 등 키입력 조건을 설정</li>
  <li><code class="language-plaintext highlighter-rouge">Modifiers</code> - 반환 되는 값을 수정</li>
</ul>

<h2 id="하나의-액션으로-여러값-반환">하나의 액션으로 여러값 반환</h2>
<p>하나의 동작을 하는데 여러 종류의 반환 값이 필요한 경우가 있다. 예를 들면 <strong>이동</strong>이 있을 것이다. 이동은 상하좌우 총 <strong>4가지</strong> 종류의 행동을 할 수 있기에 4종류의 반환 값이 필요하다. 만약 InputAction을 4개를 만들어 각각 하나의 키를 맵핑 하는 방식으로 이동을 구현 한다면 상당히 번거로울 것이다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">Modifiers</code>를 이용하면 하나의 <code class="language-plaintext highlighter-rouge">InputAction</code>으로 여러 값을 반환할 수 있다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">키</th>
      <th style="text-align: center">원하는 값</th>
      <th style="text-align: center">Modifire</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">w</td>
      <td style="text-align: center">(0, 1)</td>
      <td style="text-align: center">Swizzle Input Axis Values</td>
    </tr>
    <tr>
      <td style="text-align: center">A</td>
      <td style="text-align: center">(-1,0)</td>
      <td style="text-align: center">Negate</td>
    </tr>
    <tr>
      <td style="text-align: center">S</td>
      <td style="text-align: center">(0, -1)</td>
      <td style="text-align: center">Negate, Swizzle Input Axis Values</td>
    </tr>
    <tr>
      <td style="text-align: center">D</td>
      <td style="text-align: center">(1, 0)</td>
      <td style="text-align: center">None</td>
    </tr>
  </tbody>
</table>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/e65b77fc-c37f-487d-bb1f-74cd250c576d" alt="image" /></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://docs.unrealengine.com/5.0/ko/enhanced-input-in-unreal-engine/">https://docs.unrealengine.com/5.0/ko/enhanced-input-in-unreal-engine/</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="Unrealengine5" /><category term="UE5" /><category term="EnhancedInput" /><category term="언리얼엔진5" /><summary type="html"><![CDATA[EnhancedInput 언리얼엔진5은 기존 InputSystem을 대체하는 Enhanced Input을 이용해 더 확장성 높고 사용하기 편한 입력 시스템을 만들었다. 이 시스템 중 Input Mapping Context는 하나 이상의 Input Action을 트리거 할 수 있게 해준다.]]></summary></entry><entry><title type="html">[Git] 100MB이상 커밋하기 Git-LFS</title><link href="http://localhost:4000/git/Git-LFS%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="[Git] 100MB이상 커밋하기 Git-LFS" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/git/Git%20LFS%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/git/Git-LFS%EC%82%AC%EC%9A%A9%EB%B2%95/"><![CDATA[<h2 id="문제-발생">문제 발생</h2>
<p>Github로 수정 내용을 저장소에 올리는 과정에서 특정 파일의 크기가 100MB가 넘어가면 Git에서 commit을 reject한다. 이를 해결 하기 위해선 100MB가 넘어가는 파일을 커밋하는 과정에서 <strong>제외</strong>하거나 <code class="language-plaintext highlighter-rouge">Git LFS</code>를 사용해야 한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/d780856e-da75-4942-856c-fe6b9299c5ce" alt="image" /></p>

<h2 id="git-lfs">Git LFS</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/063e1bdd-53e2-4d4c-96a9-b65cddbac7b5" alt="image" /></p>

<p>LFS로 관리 받는 파일은 실제 리포지토리가 아닌 다른 저장소로 옮겨지고 실제 리포지토리는 메타데이터를 통해 다른 저장소에 있는 파일을 가리키는 방식으로 대용량 파일을 관리한다.</p>

<p>관리하는 파일 하나당 최대 크기가 있다. 해당 크기는 사용하는 GitHub Product에 따라 다르다.</p>

<table>
  <thead>
    <tr>
      <th>Product</th>
      <th>최대 파일 크기</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GitHub Free</td>
      <td>2GB</td>
    </tr>
    <tr>
      <td>GitHub Pro</td>
      <td>2GB</td>
    </tr>
    <tr>
      <td>GitHub Team</td>
      <td>4GB</td>
    </tr>
    <tr>
      <td>GitHub Enterprise Cloud</td>
      <td>5GB</td>
    </tr>
  </tbody>
</table>

<h2 id="사용법">사용법</h2>
<h3 id="1-관리파일-설정">1. 관리파일 설정</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git lfs install
$ git lfs track "파일명"
$ git lfs track "*.png"
</code></pre></div></div>
<p>lfs를 다운 받고 추적하려는 파일을 설정한다.</p>

<h3 id="2-gitattribute-파일-커밋">2. .gitattribute 파일 커밋</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add .gitattribute
$ git commit -m "Add gitattribute"
$ git push -u origin main
</code></pre></div></div>
<p>파일을 track하면 <code class="language-plaintext highlighter-rouge">.gitattribute</code>라는 파일이 생성된다. 이 또한 커밋을 해줘야한다.</p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://oneseat.tistory.com/entry/Github%EC%97%90-100MB%EA%B0%80-%EB%84%98%EB%8A%94-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%A0-%EB%95%8C-%EC%83%9D%EA%B8%B0%EB%8A%94-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0">https://oneseat.tistory.com/</a>
<a href="https://github.com/git-lfs/git-lfs">https://github.com/git-lfs/git-lfs</a>
<a href="https://docs.github.com/ko/repositories/working-with-files/managing-large-files/about-git-large-file-storage">https://docs.github.com/ko/repositories/working-with-files/managing-large-files/about-git-large-file-storage</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="git" /><category term="Git" /><category term="LFS" /><category term="Github" /><summary type="html"><![CDATA[문제 발생 Github로 수정 내용을 저장소에 올리는 과정에서 특정 파일의 크기가 100MB가 넘어가면 Git에서 commit을 reject한다. 이를 해결 하기 위해선 100MB가 넘어가는 파일을 커밋하는 과정에서 제외하거나 Git LFS를 사용해야 한다.]]></summary></entry><entry><title type="html">[CS] 짧은 순회 평가(Short circuit evaluation)</title><link href="http://localhost:4000/computerscience/CS-%EC%A7%A7%EC%9D%80-%EC%88%9C%ED%9A%8C-%ED%8F%89%EA%B0%80/" rel="alternate" type="text/html" title="[CS] 짧은 순회 평가(Short circuit evaluation)" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/computerscience/CS%20%EC%A7%A7%EC%9D%80%20%EC%88%9C%ED%9A%8C%20%ED%8F%89%EA%B0%80</id><content type="html" xml:base="http://localhost:4000/computerscience/CS-%EC%A7%A7%EC%9D%80-%EC%88%9C%ED%9A%8C-%ED%8F%89%EA%B0%80/"><![CDATA[<h2 id="short-circuit-evaluation">Short circuit evaluation</h2>
<p>논리연산을 할 때 왼쪽 식부터 차례대로 논리평가를 하다가 만약 결과가 false일 경우 우측에 있는 식을 검증하지 않고 끝나는 것을 뜻한다. 왜 이런 것이 있을까 생각해보면 답은 간단하다. 이미 논리연산의 결과가 나왔기에 남은 논리평가를 실행할 이유가 없기 때문이다.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="mi">5</span><span class="p">){}</span>
</code></pre></div></div>
<p>v의 length가 0일경우 만약 우측 논리 평가를 한다면 에러가 나올 테지만 v[0]이 0일 경우 false가 되고 <strong>AND(&amp;&amp;)연산자</strong>라 우측이 true,false 뭐가 되든 false일 테니 우측은 볼필요 없기에 <strong>생략</strong>한다.</p>

<p>이렇듯 뒤의 계산의 결과 값이 어떻든 이미 값이 정해져서 논리평가를 생략하는 것이 <strong>짧은 순회 평가</strong>다.</p>

<hr />
<h3 id="발생하는-경우">발생하는 경우</h3>
<ul>
  <li>false <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> <font color="dodgerred">true or false</font></li>
  <li>true <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> true or false</li>
  <li>false <code class="language-plaintext highlighter-rouge">||</code> true or false</li>
  <li>true <code class="language-plaintext highlighter-rouge">||</code> <font color="dodgerred">true or false</font></li>
</ul>

<p>빨간색 포인트가 생략되는 부분이다.</p>

<div class="callout-red-expanded">
<div class="callout-header">주의사항</div>
<p>
만약 생략되는 구간에 command 함수가 들어가면 함수가 실행이 되지 않아 로직이 깨지는 side effect가 생길 수 있다. 이런 경우는 if 문 안이 아닌 밖에서 따로 실행 해줘야 한다.
</p>
</div>
<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">https://en.wikipedia.org/wiki/Short-circuit_evaluation</a>
<a href="https://80000coding.oopy.io/2283e1be-93c5-4f00-ac7a-83bcb7dcad0d">https://80000coding.oopy.io/2283e1be-93c5-4f00-ac7a-83bcb7dcad0d</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="computerscience" /><category term="CS" /><category term="Short circuit evaluation" /><category term="짧은 순회 평가" /><summary type="html"><![CDATA[Short circuit evaluation 논리연산을 할 때 왼쪽 식부터 차례대로 논리평가를 하다가 만약 결과가 false일 경우 우측에 있는 식을 검증하지 않고 끝나는 것을 뜻한다. 왜 이런 것이 있을까 생각해보면 답은 간단하다. 이미 논리연산의 결과가 나왔기에 남은 논리평가를 실행할 이유가 없기 때문이다. if(v[0] != 0 &amp;&amp; v[3] == 5){} v의 length가 0일경우 만약 우측 논리 평가를 한다면 에러가 나올 테지만 v[0]이 0일 경우 false가 되고 AND(&amp;&amp;)연산자라 우측이 true,false 뭐가 되든 false일 테니 우측은 볼필요 없기에 생략한다.]]></summary></entry><entry><title type="html">[C++] 전방선언(Forward Declaration)</title><link href="http://localhost:4000/cpp/CPP-%EC%A0%84%EB%B0%A9%EC%84%A0%EC%96%B8/" rel="alternate" type="text/html" title="[C++] 전방선언(Forward Declaration)" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/cpp/CPP%20%EC%A0%84%EB%B0%A9%EC%84%A0%EC%96%B8</id><content type="html" xml:base="http://localhost:4000/cpp/CPP-%EC%A0%84%EB%B0%A9%EC%84%A0%EC%96%B8/"><![CDATA[<h2 id="전방선언">전방선언</h2>
<p>식별자를 정의하기 전 미리 식별자를 <strong>컴파일러</strong>에 알리는 것을 뜻한다.
원래는 식별자를 사용하기 위해선 정의된 헤더를 불러와야 하지만 전방선언(forward declaratioin)을 이용해 헤더를 선언하지 않아도 사용할 수 있다.</p>

<h2 id="사용법">사용법</h2>
<h3 id="클래스-타입-전방선언">클래스 타입 전방선언</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyObject</span><span class="p">;</span> <span class="c1">// 타입 전방선언</span>

<span class="n">MyObject</span><span class="o">*</span> <span class="n">ob1</span><span class="p">;</span>
</code></pre></div></div>
<p>타입이 클래스임을 알리는 전방선언(forward declaratioin)이다. 이렇게 헤더를 선언하지 않고 사용하는 것 이여서 <strong>포인터 객체</strong>만 이용 가능하다. 직접적인 함수를 이용하려 할 시 오류가 발생한다.</p>

<ul>
  <li>헤더를 불러오는 시간이 줄어든다.
    <ul>
      <li>컴파일 단계에선 헤더 선언시 주석을 포함한 모드 코드를 불러옴</li>
    </ul>
  </li>
  <li>의존성이 줄어든다</li>
</ul>

<hr />
<h3 id="함수-전방선언">함수 전방선언</h3>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// 함수 전방선언</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
	<span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>만약 함수 전방선언을 하지 않고 코드를 실행할 시 main에서 add 함수를 실행하려 할 때 add 함수가 declaration 되어 있지 않다고 오류가 나올 것이다. 이는 C++가 위에서 부터 아래로 한줄 씩 코드를 읽는 <strong>컴파일 언어</strong>이기 때문에 발생하는 것인데 add함수는 아래에 정의(difinition)되어 있지만 main에서 사용할 때 까지 add 함수를 발견하지 못해서 발생하는 문제다.</p>

<p>그렇기에 위와 같이 전방선언을 통해서 컴파일러에 미리 알려주면 컴파일이 완료된다.</p>

<h2 id="summary">Summary</h2>
<ul>
  <li>타입 전방선언
    <ul>
      <li>헤더를 생략해 컴파일 속도 향상</li>
      <li>헤더 의존성 감소</li>
      <li>타입을 직접 사용하지 않는 경우에만 사용</li>
    </ul>
  </li>
  <li>함수 전방선언
    <ul>
      <li>함수를 미리 선언해 선언 위치에 따른 컴파일 오류 해결</li>
    </ul>
  </li>
</ul>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://boycoding.tistory.com/143">https://boycoding.tistory.com/143</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="cpp" /><category term="C++" /><category term="Forward Declaration" /><category term="전방선언" /><summary type="html"><![CDATA[전방선언 식별자를 정의하기 전 미리 식별자를 컴파일러에 알리는 것을 뜻한다. 원래는 식별자를 사용하기 위해선 정의된 헤더를 불러와야 하지만 전방선언(forward declaratioin)을 이용해 헤더를 선언하지 않아도 사용할 수 있다.]]></summary></entry><entry><title type="html">[C++] 백준 2665번-미로만들기</title><link href="http://localhost:4000/boj/BOJ-2665%EB%B2%88/" rel="alternate" type="text/html" title="[C++] 백준 2665번-미로만들기" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/boj/BOJ%202665%EB%B2%88</id><content type="html" xml:base="http://localhost:4000/boj/BOJ-2665%EB%B2%88/"><![CDATA[<p><a href="https://www.acmicpc.net/problem/2665">BOJ 2665-미로만들기</a></p>

<h2 id="문제">문제</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9ade69c5-a7c6-407b-9652-6d181e5f0bd3" alt="image" /></p>

<div class="code-block1">
예제 입력
<div class="language-cpp highlighter-rouge">
<div class="highlight">
<pre class="highlight"><code>8
11100110
11010010
10011010
11101100
01000111
00110001
11011000
11000111</code></pre></div></div></div>

<div class="code-block2">
에제 출력
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight">
<code>2</code></pre></div></div></div>

<h2 id="풀이">풀이</h2>
<p>BFS를 사용하여 풀었다.</p>
<ol>
  <li>board의 맵을 저장하고 flag는 방문 시 가장 적은 횟수로 벽을 부셨던 경우다.</li>
  <li>queue에 좌표(x,y)와 부순 횟수(c)를 담는다.</li>
  <li>queue를 탐색하고 현재 탐색 노드의 flag값보다 c가 크면 다음으로 넘어간다.</li>
  <li>도착지점이면 답을 갱신한다.</li>
  <li>주변 4개의 타일을 큐에 삽입한다.</li>
</ol>

<h2 id="소스코드">소스코드</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"bits/stdc++.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define MAX 10000000
</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span> <span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">};</span>

<span class="kt">int</span> <span class="n">board</span><span class="p">[</span><span class="mi">51</span><span class="p">][</span><span class="mi">51</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">flag</span><span class="p">[</span><span class="mi">51</span><span class="p">][</span><span class="mi">51</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">bool</span> <span class="nf">InMap</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">BFS</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">queue</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
	<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span> <span class="p">});</span>

	<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>
		<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>
		<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">());</span>

		<span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">InMap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="p">{</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="n">answer</span><span class="p">)</span>
			<span class="k">continue</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="p">}</span>
		
		<span class="n">flag</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">answer</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
			<span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
			<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span> <span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">,</span><span class="n">c</span> <span class="p">});</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="n">MAX</span><span class="p">)</span>
		<span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">string</span> <span class="n">s</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">s</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="sc">'0'</span><span class="p">);</span>
			<span class="n">flag</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">BFS</span><span class="p">();</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Mohitto55</name></author><category term="boj" /><category term="boj" /><category term="백준" /><category term="solved" /><category term="문제풀이 2665번" /><summary type="html"><![CDATA[BOJ 2665-미로만들기]]></summary></entry><entry><title type="html">[Git Blog] Jekyll에서 emoji사용하기</title><link href="http://localhost:4000/gitblog/Jekyll-%EC%9D%B4%EB%AA%A8%EC%A7%80-%EC%A0%81%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="[Git Blog] Jekyll에서 emoji사용하기" /><published>2024-02-22T00:00:00+09:00</published><updated>2024-02-22T00:00:00+09:00</updated><id>http://localhost:4000/gitblog/Jekyll%20%EC%9D%B4%EB%AA%A8%EC%A7%80%20%EC%A0%81%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/gitblog/Jekyll-%EC%9D%B4%EB%AA%A8%EC%A7%80-%EC%A0%81%EC%9A%A9%EB%B2%95/"><![CDATA[<h2 id="emoji">Emoji?</h2>
<p>Jekyll 테마는 github의 <code class="language-plaintext highlighter-rouge">gemoji</code> 같이 <font color="red">::</font> 사이에 이름를 넣어 Emoji를 사용 할 수 있는 기능인 <code class="language-plaintext highlighter-rouge">jemoji</code>를 제공한다. 다만 기본적으로 제공하는 건 아니고 플러그인을 추가해줘야 한다.</p>

<h3 id="jemoji-적용">jemoji 적용</h3>
<p><code class="language-plaintext highlighter-rouge">Gemfile</code>에 jemoji를 추가한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "jemoji"
</code></pre></div></div>
<p>그리고 <code class="language-plaintext highlighter-rouge">_config.yml</code>에도 jemoji 플러그인을 추가한다.</p>
<blockquote>
  <p>gem은 Ruby에서 지원하는 패키지 시스템이다.</p>
</blockquote>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
	...
	- jemoji
</code></pre></div></div>

<p>그럼 <font color="red">::</font> 사이에 사용할 Emoji 이름을 넣어주면 된다. 예를 들어 white_check_mark를 넣으면 다음과 같이 나온다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/032a9bbf-5bac-480e-9582-ef77e53c0aef" alt="image" /></p>

<h2 id="커스텀-emoji-사용하기">커스텀 Emoji 사용하기</h2>
<p>Jekyll에서 제공하는 Emoji는 GitHub.com CDN에서 가져오는 것들이다. 그래서 마음에 들지 않는 Emoji가 있을 수 있는데 자신이 원하는 Emoji를 로컬저장소에서 불러오는 방식으로 커스터마이징 할 수 있다. <code class="language-plaintext highlighter-rouge">_config.yml</code>파일에 아래 소스를 추가한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emoji:
  src: "/assets/images"
</code></pre></div></div>
<p>그리고 <code class="language-plaintext highlighter-rouge">/assets/images/emoji/unicode</code>위치로가서 <code class="language-plaintext highlighter-rouge">유니코드.png</code>의 이미지 파일을 놓아주면 된다. 그러면 방금처럼 <code class="language-plaintext highlighter-rouge">:white_check_mark:</code>를 써보면 <img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/032a9bbf-5bac-480e-9582-ef77e53c0aef" alt="image" />였던 것이 :white_check_mark: 로 바뀐 것을 볼 수 있다.</p>

<hr />
<h3 id="유니코드-확인법">유니코드 확인법</h3>
<p>유니코드는 이모지 유니코드 사이트에서 직접 찾거나</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
bundle exec jekyll serve
</code></pre></div></div>
<p>로컬서버를 돌린 뒤 에러메시지로 사용할려는 Emoji의 유니코드.png가 없다고 나오는 걸 보고 적용해주면 된다.</p>

<hr />
<h2 id="page_with_curl-reference">:page_with_curl: Reference</h2>
<blockquote>
  <p><a href="https://github.com/jekyll/jemoji?tab=readme-ov-file">jemoji</a></p>

  <p><a href="https://github.com/wooorm/gemoji">gemoji</a></p>
</blockquote>]]></content><author><name>Mohitto55</name></author><category term="gitblog" /><category term="jekyll" /><category term="minimal-mistake" /><category term="emoji" /><category term="이모지" /><category term="jemoji" /><category term="gemoji" /><summary type="html"><![CDATA[Emoji? Jekyll 테마는 github의 gemoji 같이 :: 사이에 이름를 넣어 Emoji를 사용 할 수 있는 기능인 jemoji를 제공한다. 다만 기본적으로 제공하는 건 아니고 플러그인을 추가해줘야 한다.]]></summary></entry><entry><title type="html">SOLID 객체지향 5대원칙</title><link href="http://localhost:4000/cpp/SOLID-%EC%9B%90%EC%B9%99/" rel="alternate" type="text/html" title="SOLID 객체지향 5대원칙" /><published>2024-02-22T00:00:00+09:00</published><updated>2024-02-22T00:00:00+09:00</updated><id>http://localhost:4000/cpp/SOLID%20%EC%9B%90%EC%B9%99</id><content type="html" xml:base="http://localhost:4000/cpp/SOLID-%EC%9B%90%EC%B9%99/"><![CDATA[<h2 id="설명">설명</h2>
<p>OOP(객체지향언어)를 개발 하면서 지켜야 할 5가지 원칙을 말한다. 많은 Design Pattern이 SOLID 원칙을 토대로 만들어졌기에 이 원칙을 숙지하면 Design Pattern 및 구조 설계를 하기 수월해진다.</p>

<p>모든 코드에 반드시 적용할 필요는 없지만 좋은 설계를 위해선 해당 사항들을 의식하면서 작성하면 좋다.</p>

<hr />

<h3 id="장점">장점</h3>
<ul>
  <li>수정과 유지보수가 수월하다</li>
</ul>

<h3 id="단일-책임-원칙srp">단일 책임 원칙(<font color="dodgerred">S</font>RP)</h3>
<ul>
  <li>객체는 하나의 목적만 가지기</li>
  <li><strong>모듈이 변경되는 이유는 한가지여야함</strong></li>
  <li>모듈 다른 모듈에 대한 책임지면 안됨</li>
</ul>

<h3 id="개방-폐쇄-원칙ocp">개방 폐쇄 원칙(<font color="dodgerred">O</font>CP)</h3>
<ul>
  <li>모듈은 확장에 열려있고 수정엔 닫혀야함</li>
  <li>추상화에 의존해야함</li>
  <li><strong>인터페이스를 통해 과정이 어떻든 결과만 받기</strong></li>
  <li>Inject 같은 느낌</li>
  <li>과정이 어떻게 바뀌든 결과만 받으면 되니 확장이 용이하다</li>
</ul>

<h3 id="리스코프-치환-원칙lsp">리스코프 치환 원칙(<font color="dodgerred">L</font>SP)</h3>
<ul>
  <li>상위 클래스는 하위 클래스로 대체 될 수 있어야함</li>
  <li>직사각형을 부모로 둔 정사각형이 resize로 가로 세로를 다르게 설정 못함</li>
  <li>이럴 경우 resize못하게 막거나 [[C++ Overriding]]</li>
  <li><strong>항상 사용하는 클라이언트 기준으로 생각하기</strong></li>
</ul>

<h3 id="인터페이스-분리-원칙isp">인터페이스 분리 원칙(<font color="dodgerred">I</font>SP)</h3>
<ul>
  <li>클라이언트 용도에 맞는 인터페이스만 제공</li>
  <li><strong>하나의 Interface보단 구체적인 여러 Interface가 좋다</strong></li>
  <li>그러면 불필요한 간섭이 줄어든다</li>
  <li>다른 인터페이스에선 필요없는 정보를 안 알아도 되게 된다</li>
</ul>

<h3 id="의존-역전-원칙dip">의존 역전 원칙(<font color="dodgerred">D</font>IP)</h3>
<ul>
  <li>상위 모듈이 하위 모듈에 의존하면 안됨</li>
  <li>상위가 갑 하위가 을 까라면 까기</li>
  <li>상위-입출력과 먼 내부</li>
  <li>하위-입풀력과 가까운 겉부분</li>
  <li><strong>Interface, Virtual</strong>를 통해 모듈이 어떻든 값만 받기</li>
  <li>OCP와 연관깊다</li>
  <li>인터페이스는 적당히 만들기</li>
</ul>

<hr />

<h2 id="page_with_curl-reference">:page_with_curl: Reference</h2>
<blockquote>
  <p><a href="https://inpa.tistory.com/entry/OOP-%F0%9F%92%A0-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%9D%98-5%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99-SOLID">Inpa Dev - 객체 지향 설계의 5가지 원칙 - S.O.L.I.D</a></p>

  <p><a href="https://dev-cool.tistory.com/18">혼잣말하는 개발자 - 객체지향의 5대 원칙 SOLID</a></p>
</blockquote>]]></content><author><name>Mohitto55</name></author><category term="cpp" /><category term="SOLID" /><category term="OOP" /><category term="객체지향" /><category term="객체지향5대원칙" /><category term="디자인패턴" /><category term="Design Pattern" /><summary type="html"><![CDATA[설명 OOP(객체지향언어)를 개발 하면서 지켜야 할 5가지 원칙을 말한다. 많은 Design Pattern이 SOLID 원칙을 토대로 만들어졌기에 이 원칙을 숙지하면 Design Pattern 및 구조 설계를 하기 수월해진다.]]></summary></entry><entry><title type="html">[Git Blog] Jekyll 코드블럭 테마 설정하기</title><link href="http://localhost:4000/gitblog/Jekyll-%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD-%ED%85%8C%EB%A7%88-%EB%B0%94%EA%BE%B8%EA%B8%B0/" rel="alternate" type="text/html" title="[Git Blog] Jekyll 코드블럭 테마 설정하기" /><published>2024-02-22T00:00:00+09:00</published><updated>2024-02-22T00:00:00+09:00</updated><id>http://localhost:4000/gitblog/Jekyll%20%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD%20%ED%85%8C%EB%A7%88%20%EB%B0%94%EA%BE%B8%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/gitblog/Jekyll-%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD-%ED%85%8C%EB%A7%88-%EB%B0%94%EA%BE%B8%EA%B8%B0/"><![CDATA[<h3 id="1-테마-설치하기">1. 테마 설치하기</h3>
<p>먼저 아래 코드블럭 테마 사이트에 가서 원하는 테마의 이름을 복사한다.
:point_right: <a href="https://spsarolkar.github.io/rouge-theme-preview/">테마 사이트</a></p>

<h3 id="2-rouge설치">2. rouge설치</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install rouge
</code></pre></div></div>
<p>CMD에서 root폴더에 위와 같이 입력해서 테마를 설치한다.</p>

<h3 id="3-_configyml-수정">3. <code class="language-plaintext highlighter-rouge">_config.yml</code> 수정.</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Conversion
markdown: kramdown
highlighter: rouge

# Markdown Processing
kramdown:
  input: GFM
</code></pre></div></div>

<h3 id="4-css파일-다운받기">4. css파일 다운받기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rougify style 테마이름 &gt; assets/css/syntax.css
</code></pre></div></div>
<p>원하는 테마의 syntax.css파일이 assets/css 경로에 생성된다.</p>

<h3 id="5-테마-적용하기">5. 테마 적용하기</h3>
<p>syntax.css 파일을 _scss 폴더에 놓거나 혹은 _syntax.scss 파일이 있을 경우 해당 파일에 덮어씌우기</p>

<h2 id="page_with_curl-reference">:page_with_curl: Reference</h2>
<blockquote>
  <p>https://onda2me.github.io/blog/codeblock/</p>
</blockquote>]]></content><author><name>Mohitto55</name></author><category term="gitblog" /><category term="Git" /><category term="Blog" /><category term="Jekyll" /><category term="minimal-mistakes" /><category term="코드블럭" /><summary type="html"><![CDATA[1. 테마 설치하기 먼저 아래 코드블럭 테마 사이트에 가서 원하는 테마의 이름을 복사한다. :point_right: 테마 사이트]]></summary></entry></feed>