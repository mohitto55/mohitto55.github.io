<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-26T07:40:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mohitto55 Note</title><subtitle>모히또의 노트</subtitle><author><name>Mohitto55</name></author><entry><title type="html">[UE5] Loading PreDefault Modules for Plugin 오류 해결하기</title><link href="http://localhost:4000/ue5/UE5-Modules-for-Plugin-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/" rel="alternate" type="text/html" title="[UE5] Loading PreDefault Modules for Plugin 오류 해결하기" /><published>2024-06-25T00:00:00+09:00</published><updated>2024-06-25T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20Modules%20for%20Plugin%20%EC%98%A4%EB%A5%98%20%ED%95%B4%EA%B2%B0</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-Modules-for-Plugin-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0/"><![CDATA[<h2 id="에러-현상">에러 현상</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/cdba9f11-665f-4a29-a248-84da8582661d" alt="image" />
사용하던 5.3프로젝트를 5.4로 변경하고 Motion Matching을 연습 중이였는데 빌드하고 재시작하니 위와 같이 75%에서 계속 멈추고 진행이 되지 않았다.</p>

<p><br /></p>
<h2 id="해결-과정">해결 과정</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Warning</span>      <span class="n">LogAnimation</span>              <span class="n">SkeletalMesh</span> <span class="n">SkeletalMesh</span> <span class="o">/</span><span class="n">Game</span><span class="o">/</span><span class="n">Characters</span><span class="o">/</span><span class="n">Mannequin_UE4</span><span class="o">/</span><span class="n">Meshes</span><span class="o">/</span><span class="n">SK_Mannequin</span><span class="p">.</span><span class="n">SK_Mannequin</span> <span class="n">has</span> <span class="n">no</span> <span class="n">skeleton</span><span class="p">.</span> <span class="n">This</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">fixed</span> <span class="n">before</span> <span class="n">an</span> <span class="n">animation</span> <span class="n">can</span> <span class="n">be</span> <span class="n">set</span>
<span class="n">Warning</span>      <span class="n">LogLinker</span>                 <span class="p">[</span><span class="n">AssetLog</span><span class="p">]</span> <span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">Users</span><span class="err">\</span><span class="n">admin</span><span class="err">\</span><span class="n">git</span><span class="err">\</span><span class="n">UE5</span><span class="err">\</span><span class="n">Multi</span><span class="err">\</span><span class="n">Content</span><span class="err">\</span><span class="n">MCO_Mocap_Basics</span><span class="err">\</span><span class="n">Character</span><span class="err">\</span><span class="n">Mesh</span><span class="err">\</span><span class="n">UE4_Mannequin_Skeleton</span><span class="p">.</span><span class="n">uasset</span><span class="o">:</span> <span class="n">Failed</span> <span class="n">to</span> <span class="n">load</span> <span class="err">'</span><span class="o">/</span><span class="n">Engine</span><span class="o">/</span><span class="n">EngineMeshes</span><span class="o">/</span><span class="n">Humanoid</span><span class="err">'</span><span class="o">:</span> <span class="n">Can</span><span class="err">'</span><span class="n">t</span> <span class="n">find</span> <span class="n">file</span><span class="p">.</span>
<span class="n">Warning</span>      <span class="n">LogLinker</span>                 <span class="p">[</span><span class="n">AssetLog</span><span class="p">]</span> <span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">Users</span><span class="err">\</span><span class="n">admin</span><span class="err">\</span><span class="n">git</span><span class="err">\</span><span class="n">UE5</span><span class="err">\</span><span class="n">Multi</span><span class="err">\</span><span class="n">Content</span><span class="err">\</span><span class="n">MCO_Mocap_Basics</span><span class="err">\</span><span class="n">Character</span><span class="err">\</span><span class="n">Mesh</span><span class="err">\</span><span class="n">UE4_Mannequin_Skeleton</span><span class="p">.</span><span class="n">uasset</span><span class="o">:</span> <span class="n">VerifyImport</span><span class="o">:</span> <span class="n">Failed</span> <span class="n">to</span> <span class="n">load</span> <span class="n">package</span> <span class="k">for</span> <span class="n">import</span> <span class="n">object</span> <span class="err">'</span><span class="n">Package</span> <span class="o">/</span><span class="n">Engine</span><span class="o">/</span><span class="n">EngineMeshes</span><span class="o">/</span><span class="n">Humanoid</span><span class="err">'</span>
<span class="n">Warning</span>      <span class="n">LogAnimation</span>              <span class="n">SkeletalMesh</span> <span class="n">SkeletalMesh</span> <span class="o">/</span><span class="n">Game</span><span class="o">/</span><span class="n">Characters</span><span class="o">/</span><span class="n">Mannequin_UE4</span><span class="o">/</span><span class="n">Meshes</span><span class="o">/</span><span class="n">SK_Mannequin</span><span class="p">.</span><span class="n">SK_Mannequin</span> <span class="n">has</span> <span class="n">no</span> <span class="n">skeleton</span><span class="p">.</span> <span class="n">This</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">fixed</span> <span class="n">before</span> <span class="n">an</span> <span class="n">animation</span> <span class="n">can</span> <span class="n">be</span> <span class="n">set</span>
</code></pre></div></div>
<p>라이더에서 warning로그를 보니 캐릭터 메쉬쪽 오류로 보였다.
모션매칭을 하느라 애니메이션, Animation Blueprint등을 이것저것 만졌는데 그게 오류가 발생한 것으로 생각되어 수정한 에셋들을 하나씩 꺼내보며 확인했다.</p>

<p><br /></p>
<h2 id="발생-원인-및-해결">발생 원인 및 해결</h2>
<ul>
  <li>ABP가 깨져서 생긴 미싱 문제때문에 빌드가 멈춘 것이였다.</li>
  <li>삭제하고 새로운 ABP를 만드니 제대로 작동된다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/ed7901e8-c95e-408e-a1d6-49db1e766d87" alt="image" /></li>
</ul>

<hr />

<div class="Reference">
<div class="callout-header"> </div>
<p>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="Plugin" /><category term="Error" /><category term="Motion Matching" /><summary type="html"><![CDATA[에러 현상 사용하던 5.3프로젝트를 5.4로 변경하고 Motion Matching을 연습 중이였는데 빌드하고 재시작하니 위와 같이 75%에서 계속 멈추고 진행이 되지 않았다.]]></summary></entry><entry><title type="html">[UE5] 패키지된 게임 디버그 하는 법</title><link href="http://localhost:4000/ue5/UE5-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%94%94%EB%B2%84%EA%B7%B8/" rel="alternate" type="text/html" title="[UE5] 패키지된 게임 디버그 하는 법" /><published>2024-06-21T00:00:00+09:00</published><updated>2024-06-21T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20%ED%8C%A8%ED%82%A4%EC%A7%80%20%EB%94%94%EB%B2%84%EA%B7%B8</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%94%94%EB%B2%84%EA%B7%B8/"><![CDATA[<h1 id="개요">개요</h1>
<p>네트워크 기능이 있는 게임을 만들었는데 PIE상에서는 괜찮았는데 패키지를 하니 버그가 발생했다.
이게 네트워크에서 발생한 것인지 아니면 내부 구조 로직에서 충돌이 일어난 것인지 알길이 없어서 디버그를 해야만 했다.<br /> 언리얼 디버그에 관한 지식이 전무 했었기 때문에 이 기회에 패키지된 게임을 디버그하는 방법을 공부하여 정리하는 시간을 가져보았다.</p>

<hr />

<h1 id="사전-준비">사전 준비</h1>
<h2 id="디버깅을-위한-편집기-심볼">디버깅을 위한 편집기 심볼</h2>
<ul>
  <li>엔진에서 디버깅에 필요한 심볼 기호들이 저장되어있다.</li>
  <li>엔진 레벨에서 어떻게 동작하는지 알고 싶다면 체크해야 한다.</li>
  <li>용량이 30기가 이상으로 굉장히 크다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/cbec9f66-8e47-4727-81d8-db08c793fbc9" alt="image" /></li>
</ul>

<hr />

<h3 id="디버그-심볼">디버그 심볼</h3>
<p>디버그에 필요한 정보. 이 디버그 심볼이 들은걸 디버그 심볼 파일(프로그램 데이터베이스 파일, PDB) 이라고 한다.</p>
<ul>
  <li>디버그 심볼은 ‘정보’ 이기 때문에, 빌드 종류에 따라 달라지는 <strong>최적화 정도에 따라서 일부 혹은 전부가 ‘손실’</strong> 된다.</li>
  <li>왜냐하면 <strong>최적화 과정에서 컴파일러가 심볼을 삭제하기 때문이다.</strong></li>
  <li>그렇기에 디버그 모드로 패키지를 해야 자세한 디버그가 가능하다..</li>
</ul>

<h2 id="디버그-모드로-패키징-하기">디버그 모드로 패키징 하기</h2>
<ul>
  <li>디버깅을 자세하게 하고 싶으면 패키징 구성을 DebugGame으로 설정한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/0922c39c-b084-4b2b-97a8-2e366f004a86" alt="image" /></li>
</ul>

<h1 id="디버그-방법들">디버그 방법들</h1>
<h2 id="1-텍스트-파일-로그-확인하기">1. 텍스트 파일 로그 확인하기</h2>
<ul>
  <li>Build&gt;Windows&gt;MultiShooter&gt;Saved&gt;Logs
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/4c09e66a-1257-43fb-9b0c-0eae6ab08548" alt="image" /></li>
</ul>

<h2 id="2-visual-studio-창에서-실시간-확인">2. Visual Studio 창에서 실시간 확인</h2>
<ul>
  <li>비쥬얼 스튜디오를 킨다.</li>
  <li>
    <p>디버그 탭 &gt; 프로세스에 연결 을 누른다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/36bdc818-5c14-469a-b7cc-bb6c2665d5b6" alt="image" /></p>
  </li>
  <li>패키징한 프로그램을 실행한다.</li>
  <li>창이 뜨면 현재 실행중인 프로세스들이 확인된다.</li>
  <li>
    <p>그중 패키킹 프로그램의 이름 + Debuggame.exe 파일을 선택한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9de0581a-1ca4-4283-acc5-074d2551c9e4" alt="image" /></p>
  </li>
  <li>그러면 실시간으로 로그가 보이는 것을 알 수 있다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/2dbb4c76-92c4-4efa-b04a-1753331b1ad3" alt="image" /></li>
</ul>

<h2 id="3-직접-로그창-열지-않고-에러창이-나오게-하기">3. 직접 로그창 열지 않고 에러창이 나오게 하기</h2>
<ul>
  <li>
    <p>Project Setting &gt; Packaging &gt; Project &gt; Build Configuration
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/0a0af894-e830-49d3-95d6-638f01c44331" alt="image" /></p>
  </li>
  <li>
    <p>직접 로그창을 열지 않아도 자동으로 크래쉬 로그가 뜬다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/8d7e477f-8425-424c-8dfe-0fa8a2087c27" alt="image|400" /></p>
  </li>
</ul>

<h2 id="4-덤프파일을-통해-상황-재현하기">4. 덤프파일을 통해 상황 재현하기</h2>
<ul>
  <li>언리얼 엔진에서 크래시가 나는 경우 minidump 파일을 Saved/Crashes 디렉터리에 스테이징한다.</li>
  <li>덤프파일을 이용하면 크래시가 난 시점의 메모리 상태로 디버깅을 진행할 수 있다.</li>
  <li>이 파일을 visual studio에 드래그하고 오른쪽 네이티브 전용(으)로 디버그 버튼을 누르면 디버깅을 진행할 수 있다.</li>
</ul>

<hr />

<h1 id="그-외">그 외</h1>
<p><br /></p>
<h3 id="소스코드로-디버그-관리하기">소스코드로 디버그 관리하기</h3>
<p>스택트레이스를 로그로 남길 수 있다.</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FDebug</span><span class="p">::</span><span class="nf">DumpStackTraceToLog</span><span class="p">(</span><span class="n">ELogVerbosity</span><span class="p">::</span><span class="n">Type</span><span class="p">::</span><span class="n">Error</span><span class="p">);</span>
</code></pre></div></div>

<p>현재 호출되는 스레드 ID를 알 수 있다.</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uint32</span> <span class="n">ThreadId</span> <span class="p">=</span> <span class="n">FPlatformTLS</span><span class="p">::</span><span class="nf">GetCurrentThreadId</span><span class="p">();</span> 
<span class="n">FString</span> <span class="n">ThreadName</span> <span class="p">=</span> <span class="n">FThreadManager</span><span class="p">::</span><span class="nf">Get</span><span class="p">().</span><span class="nf">GetThreadName</span><span class="p">(</span><span class="n">ThreadId</span><span class="p">);</span>
</code></pre></div></div>

<p>FullName과 Outer 객체를 활용하여 현재 오브젝트의 인스턴스를 확인할 수 있다.</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FString</span> <span class="n">FullName</span> <span class="p">=</span> <span class="nf">GetFullName</span><span class="p">();</span>
	<span class="n">FString</span> <span class="n">OuterFullName</span> <span class="p">=</span> <span class="nf">GetOuter</span><span class="p">()-&gt;</span><span class="nf">GetFullName</span><span class="p">();</span>
	<span class="n">FString</span> <span class="nf">FuncName</span><span class="p">(</span><span class="n">__FUNCTION__</span><span class="p">);</span>
	<span class="nf">UE_LOG</span><span class="p">(</span><span class="n">LogTemp</span><span class="p">,</span> <span class="n">Error</span><span class="p">,</span> <span class="nf">TEXT</span><span class="p">(</span><span class="s">"%s  FullName : %s  OuterFullName : %s"</span><span class="p">),</span>
		<span class="p">*</span><span class="n">FuncName</span><span class="p">,</span> <span class="p">*</span><span class="n">FullName</span><span class="p">,</span> <span class="p">*</span><span class="n">OuterFullName</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<h3 id="debuggame-editor">DebugGame Editor</h3>
<p>Editor가 안 붙은 것을 선택하고 디버거를 돌리면 exe 파일이 만들어지는데, Editor가 붙은 것을 선택하고 디버거를 돌리면 dll 파일이 만들어진다.<br />
이것을 선택하면 언리얼 에디터를 켠 다음에 dll만 교체해서 컨텐츠를 엔진에 올리는 식으로 동작을 하기 때문에, 아까처럼 글로벌 셰이더가 없다는 식의 alert가 뜨지 않는다.</p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://colory-games.net/site/en/ue5-debug_packaged_project-en/">https://colory-games.net/site/en/ue5-debug_packaged_project-en/</a>
<a href="https://velog.io/@liha_engineer/ue4start-4">https://velog.io/@liha_engineer/ue4start-4</a>
<a href="https://mingyu0403.tistory.com/298">https://mingyu0403.tistory.com/298</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="Debug" /><category term="Package" /><summary type="html"><![CDATA[개요 네트워크 기능이 있는 게임을 만들었는데 PIE상에서는 괜찮았는데 패키지를 하니 버그가 발생했다. 이게 네트워크에서 발생한 것인지 아니면 내부 구조 로직에서 충돌이 일어난 것인지 알길이 없어서 디버그를 해야만 했다. 언리얼 디버그에 관한 지식이 전무 했었기 때문에 이 기회에 패키지된 게임을 디버그하는 방법을 공부하여 정리하는 시간을 가져보았다.]]></summary></entry><entry><title type="html">[UE5] 트레이스 채널 사용법</title><link href="http://localhost:4000/ue5/UE5-%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%B1%84%EB%84%90-%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="[UE5] 트레이스 채널 사용법" /><published>2024-05-20T00:00:00+09:00</published><updated>2024-05-20T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4%20%EC%B1%84%EB%84%90%20%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%B1%84%EB%84%90-%EC%82%AC%EC%9A%A9%EB%B2%95/"><![CDATA[<h2 id="개요">개요</h2>
<ul>
  <li>트레이스 채널 생성 for 액션 판정 - ABAction</li>
  <li>캐릭터 캡슐용 프로필 : ABAction 트레이스 채널에 반응 타입은 Pawn이다.</li>
  <li>스켈레탈 메시용 프로필 - 주로 랙돌 구현</li>
  <li>트리거용 프로필 : 폰 캡슐에만 반응, 타입은 WorldStaticd</li>
</ul>

<hr />

<h3 id="트레이스-채널-추가">트레이스 채널 추가</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Project Setting &gt; Engine &gt; Collision &gt; New Trace Channel</code>
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/790c3cdb-0cc0-47c8-951b-2684e9ff83e0" alt="image" /></li>
</ul>

<hr />
<h3 id="프리셋-추가">프리셋 추가</h3>

<ul>
  <li>아래 쪽 New를 통해 새 프리셋을 제작가능하다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/4a377dfa-33c4-4d18-8413-a3b5894a3416" alt="image" /></li>
</ul>

<h3 id="트레이스-채널-확인법">트레이스 채널 확인법</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Config -&gt; DefaultEngine.ini</code> 에서 확인할 수 있다.</li>
</ul>

<h2 id="트레이싱-함수-선택">트레이싱 함수 선택</h2>
<h3 id="카테고리-1-처리방법">카테고리 1: 처리방법</h3>

<hr />

<h3 id="카테고리2-대상">카테고리2: 대상</h3>
<ul>
  <li>Test : 무언가 감지되었는지 테스트</li>
  <li>Single, AnyTest : 감지된 단일 물체 정보 반환</li>
  <li>Multi : 감지된 모든 물체 정보 배열로 봔혼</li>
</ul>

<hr />

<h3 id="카테고리3-처리설정">카테고리3: 처리설정</h3>
<ul>
  <li>ByChannel : 채널 이용한 감지</li>
  <li>ByObjectType : 물리 타입 감지</li>
  <li>ByProfile : 프로필 감지</li>
</ul>

<h2 id="공격-판정-구현">공격 판정 구현</h2>
<ul>
  <li>캐릭터 위치서 시선 방향 쪽 물체 감지</li>
  <li>작은 구체 제작, 시선 방향 으로 투사</li>
  <li>하나의 물체만 감지</li>
  <li>트레이스 감지</li>
</ul>

<h2 id="터렛-애셋-구하기">터렛 애셋 구하기</h2>
<p><a href="https://www.artstation.com/marketplace/p/8gMjY/capital-ship-turret">ArtStation - capital ship Turret | Game Assets</a></p>

<hr />

<h1 id="터렛-만들기">터렛 만들기</h1>
<ul>
  <li>플레이어가 일정 거리 안에 오면 플레이어 방향으로 회전하게 한다.</li>
  <li>플레이어가 거리안에 오면 일정시간마다 공격을 한다.</li>
  <li>터렛의 공격은 LineTrace로 판정하며 벽을 다 무시하고 오직 플레이어만 맞도록 한다.</li>
</ul>

<h2 id="공격-판정-구현-1">공격 판정 구현</h2>

<h3 id="트레이스-채널-추가-1">트레이스 채널 추가</h3>
<ul>
  <li>트레이스 : 레이캐스트, 스위프 같이 트레이스를 통한 판정여부를 확인할 때 해당 채널에 대해서만 충돌 검사하도록 지정하는 레이어</li>
  <li><code class="language-plaintext highlighter-rouge">Project Setting -&gt; Engine -&gt; Collision -&gt; New Trace Channel</code> 에서 채널을 추가한다.</li>
  <li>트레이스 이름은 Attack와 디폴트 반응으로 Ignore설정</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Default Response</th>
      <th><center>설명</center></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Block</td>
      <td>트레이스에 대해 모든 물체가 반응한다.</td>
    </tr>
    <tr>
      <td style="text-align: center">Overlap</td>
      <td>충돌은 일어나지 않지만 트리거 반응을 감지한다.</td>
    </tr>
    <tr>
      <td style="text-align: center">Ignore</td>
      <td>완전히 무시한다.</td>
    </tr>
  </tbody>
</table>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/4a93d8e7-9c7d-4583-93de-a421a3ca3455" alt="image" /></p>

<hr />

<h3 id="프로필-추가">프로필 추가</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9ceb5829-48e8-4536-bd61-55f9046cdf8f" alt="image" /></p>

<blockquote>
  <p>프로필 - 특정 ObjectType이 다른 트레이스, 오브젝트간 충돌판정 여부가 있는 데이터</p>
</blockquote>

<ul>
  <li>아래 쪽 Preset New를 통해 새 프로필 제작가능</li>
  <li>CollisionEnabled : <font color="dodgerred">Collision</font>을 처리하는 방법에
    <ul>
      <li>
        <font color="dodgerred">No Collision</font>
        <p>: 충돌 없음. 움직이는 오브젝트에서 최적의 퍼포먼스를 낸다.</p>
      </li>
      <li>
        <font color="dodgerred">Query Only</font>
        <p>: 두 물체의 충돌 영역이 서로 겹치는지 테스트하는 설정. 충돌 영역의 겹침을 감지하는 것을 오버랩(Overlap) 이라고 부르며, 충돌 영역이 겹치면 관련 컴포넌트에 <em>BeginOverlap</em> 이벤트가 발생한다. 지정한 영역에 물체가 충돌하는지 탐지하는 레이캐스트(Raycast) 나 스윕(Sweep) 기능도 Query 에 속한다.</p>
      </li>
      <li>
        <font color="dodgerred">Physics Only</font>
        <p>: Simulate (RigidBody, Constraint) 에만 충돌을 처리. 본 단위의 감지가 필요치는 않은 캐릭터의 2차 시뮬레이션에 좋습니다.</p>
      </li>
      <li>
        <font color="dodgerred">Collision Enabled</font>
        <p>: Query와 Simulate를 다 사용합니다.</p>
      </li>
    </ul>
  </li>
  <li>ObjectType : 해당 프로필을 사용하는 콜리전 채널 설정
    <ul>
      <li>
        <font color="dodgerred">WorldStatic</font>
        <p>: 이동하지 않는 액터.</p>
      </li>
      <li>
        <font color="dodgerred">WorldDynamic</font>
        <p> : 열리는 문과 같이 애니메이션 또는 Kinematic 같은 코드의 영향을 받아 움직이는 액터 유형.</p>
      </li>
      <li>
        <font color="dodgerred">Pawn</font>
        <p>: 플레이어 캐릭터같은 Pawn 유형.</p>
      </li>
      <li>
        <font color="dodgerred">PhysicsBody</font>
        <p>: Physics Simulation으로 인해 움직이게 되는 캐릭터.</p>
      </li>
      <li>
        <font color="dodgerred">Vehicle</font>
        <p>: Vehicle 유형.</p>
      </li>
      <li>
        <font color="dodgerred">Destructible</font>
        <p>: 부술 수 있는 어떠한 오브젝트.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h4 id="attack-트레이스-감지용-프리셋-설정">Attack 트레이스 감지용 프리셋 설정</h4>
<ul>
  <li>Name : UECapsule</li>
  <li>CollisionEnabled : Query Only</li>
  <li>ObjectType : Pawn</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9b48a11c-f0da-4f85-8b47-c3f8f685bcab" alt="Pasted image 20240421002830" /></p>

<hr />

<h3 id="트레이스-채널-확인법-1">트레이스 채널 확인법</h3>
<ul>
  <li>Config -&gt; DefaultEngine.ini 에서 확인</li>
  <li>트레이스 채널 이름으로 검색하면 DefaultChannelResponses 부분에 <code class="language-plaintext highlighter-rouge">ECC_GameTraceChannel1</code>와 같은 트레이스 채널이 적혀있다.</li>
</ul>

<div class="callout-warning-expanded">
<div class="callout-header">주의사항</div>
<p>
ECC트레이스 채널 이름 중 ECC_Engine과 같이 비슷한 이름들이 많다.
ECC_GameTraceChannel 유형의 채널들을 선택해야한다.
</p>
</div>

<hr />
<h3 id="캐릭터의-트레이스-프로파일-설정">캐릭터의 트레이스 프로파일 설정</h3>
<h4 id="에디터">에디터</h4>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/42a8a974-0448-4406-9f75-5149e86ac974" alt="image" /></p>

<h4 id="코드">코드</h4>

<blockquote>
  <p>프로필 이름을 통해 프로필을 설정해준다. 생성자에서 작성한다.
GetCapsuleComponent는 Character를 상속받는 폰에서만 사용 가능하다.
상속받지 않는다면 직접 Collision 컴포넌트를 생성해 설정해주어야 한다.</p>
</blockquote>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GetCapsuleComponent</span><span class="p">()-&gt;</span><span class="nf">SetCollisionProfileName</span><span class="p">(</span><span class="nf">TEXT</span><span class="p">(</span><span class="s">"UECapsule"</span><span class="p">));</span>
</code></pre></div></div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="Trace Channel" /><summary type="html"><![CDATA[개요 트레이스 채널 생성 for 액션 판정 - ABAction 캐릭터 캡슐용 프로필 : ABAction 트레이스 채널에 반응 타입은 Pawn이다. 스켈레탈 메시용 프로필 - 주로 랙돌 구현 트리거용 프로필 : 폰 캡슐에만 반응, 타입은 WorldStaticd]]></summary></entry><entry><title type="html">[UE5] Unreal Insights 사용법</title><link href="http://localhost:4000/ue5/UE5-%EC%9D%B8%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%82%AC%EC%9A%A9%EB%B2%95/" rel="alternate" type="text/html" title="[UE5] Unreal Insights 사용법" /><published>2024-05-20T00:00:00+09:00</published><updated>2024-05-20T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20%EC%9D%B8%EC%82%AC%EC%9D%B4%ED%8A%B8%20%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-%EC%9D%B8%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%82%AC%EC%9A%A9%EB%B2%95/"><![CDATA[<h2 id="프로파일링-profiling">프로파일링 (Profiling)</h2>
<ul>
  <li>프로그래밍에서의 프로파일링이란 소프트웨어의 성능 분석을 말한다.</li>
  <li>프로그램의 메모리, CPU 사용량, 여러 이벤트 발생률들을 통계적으로 요약하여 보여준다.</li>
  <li>프로파일링 툴을 이용하여 성능 취약점 부분을 찾아내어 보다 쉬운 최적화가 가능하다.</li>
</ul>

<h2 id="언리얼-인사이트">언리얼 인사이트</h2>
<ul>
  <li>언리얼의 프로파일링 툴이다.</li>
  <li>다양한 퍼포먼스 데이터를 체크할 수 있다.</li>
  <li>네트워크 통신 상태도 확인 가능하다.</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/e9651a4e-a15b-4aa3-9d51-8d53c662a740" alt="image" /></p>

<h2 id="로컬-게임-설정법">로컬 게임 설정법</h2>
<h3 id="인사이트-실행하기">인사이트 실행하기</h3>
<ul>
  <li>언리얼 엔진 설치 폴더 확인
    <ul>
      <li>프로젝트 폴더가 아닌 <font color="dodgerred">프로그램 설치위치</font></li>
      <li><code class="language-plaintext highlighter-rouge">C:\Program Files\Epic Games\UE_5.3\Engine\Binaries\Win64\UnrealInsights.exe</code>
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/b2b71b52-4bf7-4383-8992-10772f62a3cd" alt="image" /></li>
    </ul>
  </li>
  <li>인사이트 프로그램의 숏컷 생성
    <ul>
      <li>Win64 폴더안에 <code class="language-plaintext highlighter-rouge">UnrealInsights.exe</code> 파일 찾기</li>
      <li>바로가기 만들거나 작업 표시줄 생성
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/385f22a8-04ec-4722-9231-fb4dc54e743f" alt="image" /></li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="환경-설정하기">환경 설정하기</h3>
<ul>
  <li>언리얼 에디터 실행 파일의 PATH 설정
    <ul>
      <li>설정 &gt; 시스템 &gt; 정보 &gt; 고급 시스템 설정 &gt; <font color="dodgerred">환경변수</font> &gt; admin 사용자 변수에서 <em>Path</em> 추가 혹은 편집으로 <code class="language-plaintext highlighter-rouge">C:\Program Files\Epic Games\UE_5.3\Engine\Binaries\Win64</code> 넣기</li>
    </ul>
  </li>
</ul>

<div class="callout-info-expanded">
<div class="callout-header">환경변수</div>
<p>
환경 변수(Environment Variable) 란 프로세스가 컴퓨터에서 동작하는 방식에 영향을 미치는, 동적인 값들의 모임이다.
환경변수 PATH는 실행시키려는 프로그램의 기본 경로를 말한다.
</p>
</div>

<hr />

<h3 id="인사이트-변수-설정">인사이트 변수 설정</h3>
<ul>
  <li>언리얼 에디터를 구동하기  위한 <font color="dodgerred">배치 파일</font> 제작
    <ul>
      <li>프로젝트 루트 폴더로 이동</li>
      <li>NetworkInsightsEditor.bat 생성</li>
      <li><code class="language-plaintext highlighter-rouge">UnrealEditor.exe %cd%\프로젝트.uproject 추가옵션</code> 작성</li>
      <li>배치 파일 실행</li>
      <li>경로 중에 뛰어쓰기가 있으면 안된다</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/89aab183-06c8-4bf0-bff2-5e81e43a07cb" alt="image" /><em>루트 폴더에 있는 bat 파일</em></p>

<ul>
  <li>-trace
    <ul>
      <li>활성화할 <font color="dodgerred">트레이스 채널</font>을 정하는 옵션이다.</li>
      <li>아래는 활성 가능한 트레이스 채널종류이다.</li>
      <li><code class="language-plaintext highlighter-rouge">Log,Bookmark,Frame,CPU,GPU,LoadTime,File,Net</code></li>
      <li>트레이스 시스템을 이용해 최소한의 오버헤드로 높은 빈도의 이벤트 처리가 가능하다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/74bdc30e-ea52-45aa-891f-2dbdf7494fae" alt="image" /></li>
    </ul>
  </li>
  <li>트레이스 명령 옵션에 대한 자세한 설명은 아래 링크에서 확인
    <ul>
      <li><a href="https://docs.unrealengine.com/4.27/ko/TestingAndOptimization/PerformanceAndProfiling/UnrealInsights/Reference/">Trace Document</a></li>
    </ul>
  </li>
</ul>

<h2 id="트레이스-기록-확인-호스트-설정">트레이스 기록 확인 호스트 설정</h2>
<ul>
  <li>이벤트 스트림은 소켓을 통해 호스팅되는 서버로 전송될 수 있다. (원격 프로파일링)</li>
  <li>굳이 원격호스팅이 아니고 로컬이여도 프로파일링을 기록하기 위해선 본인 기기의 IP를 적용해주어야 한다.</li>
</ul>

<h4 id="변수-설정단계에서-지정하기">변수 설정단계에서 지정하기</h4>
<ul>
  <li>로컬 호스트가 아닌 다른 컴퓨터에서 실행되는 경우 <code class="language-plaintext highlighter-rouge">-tracehost=주소</code> 를 통해 호스트 주소 지정이 가능하다</li>
</ul>

<hr />

<h4 id="gui에서-지정하기">GUI에서 지정하기</h4>
<ul>
  <li>Connection에 가서 호스트 IP 주소 입력후 Connect를 클릭한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9f6bae44-7032-446f-bfdb-4537019192a6" alt="image" /></li>
</ul>

<hr />

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/c35ce651-f6fd-4230-a23c-b756f584228e" alt="스크린샷 2024-03-23 212051" /><em>Recoder 목록</em></p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/ce1cdba3-f6bb-44ea-947a-a77eae1d85eb" alt="스크린샷 2024-03-23 212108" /><em>CPU Stream</em></p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/eaf72e9b-3b19-4cf4-b328-09929d0bb771" alt="스크린샷 2024-03-23 212513" /><em>Net Stream</em></p>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="Unreal Insights" /><summary type="html"><![CDATA[프로파일링 (Profiling) 프로그래밍에서의 프로파일링이란 소프트웨어의 성능 분석을 말한다. 프로그램의 메모리, CPU 사용량, 여러 이벤트 발생률들을 통계적으로 요약하여 보여준다. 프로파일링 툴을 이용하여 성능 취약점 부분을 찾아내어 보다 쉬운 최적화가 가능하다.]]></summary></entry><entry><title type="html">[UE5] 애니메이션 리타겟팅 완벽히 이해하기</title><link href="http://localhost:4000/ue5/UE5-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A6%AC%ED%83%80%EA%B2%9F%ED%8C%85/" rel="alternate" type="text/html" title="[UE5] 애니메이션 리타겟팅 완벽히 이해하기" /><published>2024-05-20T00:00:00+09:00</published><updated>2024-05-20T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%20%EB%A6%AC%ED%83%80%EA%B2%9F%ED%8C%85</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%A6%AC%ED%83%80%EA%B2%9F%ED%8C%85/"><![CDATA[<h1 id="개요">개요</h1>
<p>언리얼 마켓플레이스나 Mixamo를 둘러보다 보면 좋은 애니메이션들이 많다. 
찾은 애니메이션을 다른 Skeleton에 적용시키려고하면 Skeleton이 일치하지 않아 사용할 수 없는데 Animation Retargeting은 다른 Skeleton에 애니메이션을 사용할 수 있게 만들어주는 기능이다.</p>

<h1 id="mixamo-에셋-가져오기">Mixamo 에셋 가져오기</h1>
<h2 id="원하는-캐릭터로-애니메이션-가져오기">원하는 캐릭터로 애니메이션 가져오기</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/1f453bb3-eb17-4157-a4d3-e23b0a7ab833" alt="image" /></p>
<blockquote>
  <p>Mixamo캐릭터에서 원하는 메시를 고른다.</p>
</blockquote>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9af49e37-74fa-4863-ad66-48b3d37b0dc9" alt="image" /></p>

<h1 id="리타겟팅">리타겟팅</h1>
<h2 id="54-이상">5.4 이상</h2>
<ul>
  <li>5.4 버전부터는 자동으로 애니메이션 리타겟팅이 가능하다.</li>
  <li>하지만 규격이 너무 다르면 부자연스럽기에 수동으로 하는 방식을 추천한다. 
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/fb055d90-6790-4818-a3db-f278c7b9c5a9" alt="image" /></li>
</ul>

<h2 id="53-이하">5.3 이하</h2>
<p>언리얼 엔진에서의 애니메이션은 타겟팅한 스켈레톤 하나에 대해서만 작동한다. 그렇기에  원하는 애니메이션을 구해도 타겟팅된 스켈레톤이 다르면 사용할 수 없는데 이런 타겟팅을 바꿀수 있는 것이 리타겟팅이다.</p>

<p>리타겟팅을 하기위해선 스켈레톤의 bone의 규격을 맞춰줘야 한다.</p>

<h3 id="rig-설정">Rig 설정</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/937e1c5c-cb71-475a-a29a-7781841bb50e" alt="image" /></p>

<p>서로 다른 스켈레톤간의 리타겟팅을 위한 Rig 규격을 설정해 줘야한다.
애니메이션 스켈레톤 원본인 Source와 해당 스켈레톤으로 변경하고 싶은 Target의 IKRig 두개를 만들어준다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9793c784-e6fa-4f46-87aa-29b372fb1cfc" alt="스크린샷 2024-04-07 200353" /></p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/fbd2d32d-378a-4d19-a114-12a30fadc140" alt="스크린샷 2024-04-07 200408" /></p>

<p>IK_Rig안에서 원하는 스켈레톤을 지정해준다.</p>

<h2 id="세부설정">세부설정</h2>

<h3 id="루트-설정">루트 설정</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/26b6b28a-ed45-4d9d-9edf-32be4e678ec6" alt="스크린샷 2024-04-07 200416" /></p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/9f844a0f-d535-4818-80f5-bd33a20d4d07" alt="image" /></p>

<p>루트를 지정해줘야한다. 루트는 위 처럼 허리부분에 삼각형 표시가 나오는 것으로 지정했다.</p>

<hr />

<h3 id="체인-추가">체인 추가</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/11c77e90-f72f-4ea6-bed4-b7e2ddb3ac9d" alt="스크린샷 2024-04-07 200818" /></p>

<p>IK Retargeting탭에서 Add New Chain을 눌러서 라타겟팅 기준이 되는 체인을 생성해준다. 위 과정들은 Source, Target 모두 해준다.</p>

<h2 id="retargeter">Retargeter</h2>

<p>두 IK_Rig를 만들었으면 애니메이션 스켈레톤을 변환할 IK_Retargeter를 만든다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/522f66cc-d612-4f32-aa1a-f2a701c82c6f" alt="스크린샷 2024-04-07 201344" /></p>

<hr />

<p>Source와 Target의 IK_Rig를 설정해 준다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/ebcb994c-bed4-40fa-afef-6ae46410cc38" alt="스크린샷 2024-04-07 201431" /></p>

<hr />

<p>그리고 Asset Browser에서 애니메이션 미리보기를 볼 수 있는데 확인해보면</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/8123bcb5-5de4-4026-b264-ab7176d935b1" alt="스크린샷 2024-04-07 201614" /></p>

<hr />

<p>애니메이션이 잘 적용 되어있다.
만약 적용했는데 포즈가 많이 엉켜있다면 Detail에서 각 체인별로 IK와 FK를 껏다 켜보면서 맞춰보면 된다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/8559b383-4879-4883-8877-a592f991b92f" alt="스크린샷 2024-04-07 204610" /></p>

<hr />

<p>그리고 AssetBrowser 아래에 있는 ExportSelectedAnimations를 통해 애니메이션을 Export할 수 있다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/7ea655ce-f110-44cd-9799-5b27d53a42dd" alt="image" /></p>

<h2 id="apos-tpos-변경하기">APos, TPos 변경하기</h2>
<ul>
  <li>스켈레탈 메쉬들은 APos, TPos로 각각 다르다.</li>
  <li>만약 해당 포즈들을 맞춰주지 않고 리타겟팅을 진행한다면 애니메이션이 깨지는 문제가 발생한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/0aae47b1-a16d-469f-85ee-c1c7b790f15c" alt="image" /></li>
</ul>

<hr />
<h3 id="pos-변경하기">Pos 변경하기</h3>
<h4 id="53-미만-버전">5.3 미만 버전</h4>
<ul>
  <li>IK Retargeter에서 직접 포즈를 수정할 수 있는 것으로 보인다.</li>
  <li>정확히 몇버전부터 안돼는지는 확인필요하다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/804c6179-141b-41c6-9c9b-026cbfcb933d" alt="image" /></li>
</ul>

<h4 id="53-이상">5.3 이상</h4>
<ul>
  <li>SkeletalMesh 혹은 Static Skeleton에셋에 진입해서 원하는 포즈로 변경해준다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/881fd63a-7cb4-423a-9e99-6ace528f52d8" alt="image" /></li>
</ul>

<hr />

<ul>
  <li>상단부분 Create Asset으로 Current Pose를 눌러서 Pose Asset을 만들어준다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f44438ca-a3d9-47f2-a1e6-1f4ffee759d9" alt="image" /></li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/182b7bfe-8e6a-423e-a71d-e4a41ee41d97" alt="image" /></p>

<hr />

<ul>
  <li>IK Retargeter를 열고 Editing Retarget Pose 모드에서 만들어둔 Pose Asset을 가져온다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/3f197bae-2dbf-44b1-a532-1412c64e25e2" alt="image" /></li>
</ul>

<hr />

<ul>
  <li>
    <p>Current Retarget Pose를 통해서 포즈를 변경해준다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/7a721685-f31b-4637-9e09-fc12c270544e" alt="image" /></p>
  </li>
  <li>
    <p>적용 후
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/c48e7de4-b8bd-4ae0-975b-f53001d3df1a" alt="image" /></p>
  </li>
</ul>

<h2 id="애니메이션이-정확하지-않은데">애니메이션이 정확하지 않은데?</h2>

<ul>
  <li>
    <p>팔이 너무 벌려져 있다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/5377666c-a76d-4ca4-bb7c-c409ac44cf27" alt="image" /></p>
  </li>
  <li>수정 후</li>
  <li>
    <p>팔 간격이 같아졌다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/717c20fd-4b69-4d83-b4d5-3f7798ae145d" alt="image" /></p>
  </li>
  <li>모든 체인의 Rotation Mode를 One to One로 바꾼다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f93e647b-5fe6-47d2-930b-e6cc88bd9623" alt="image" /></li>
</ul>

<h2 id="공중에-떠있다">공중에 떠있다.</h2>

<ul>
  <li>
    <p>Crouch 모션을 하면 아래처럼 떠있다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/4c90569e-4d87-4412-a56a-1ddc5daaafb0" alt="image" /></p>
  </li>
  <li>
    <p>수정 후
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/1e307783-a762-4420-a5f7-478ae5ba93f6" alt="image" /></p>
  </li>
  <li>
    <p>루트가 포함된 Chain의 TranslationMode를 GloballyScaled로 바꾼다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/cebb1bc1-f93f-4c32-8cce-f7bda774a4b4" alt="image" /></p>
  </li>
  <li>그리고 애니메이션의 Translation Retargeting을 모두 Animation으로 변경해준다.</li>
  <li>Translation Retargeting
    <ul>
      <li>
        <font color="dodgerred">Animation</font>
        <p> - 애니메이션 데이터에서 비롯되고 변경되지 않는다.</p>
      </li>
      <li>
        <font color="dodgerred">Skeleton</font>
        <p> - 스켈레톤의 bind Pose에 비롯된다.</p>
      </li>
      <li>
        <font color="dodgerred">AnimationScaled</font>
        <p> - 애니메이션 데이터에서 비롯되지만 스켈레톤의 Scale에 따라 비율이 조정된다. 이는 대상 스켈레톤과 소스 스켈레톤의 뼈 길이 사이의 비율이다.</p>
      </li>
    </ul>
  </li>
</ul>

<h4 id="translation-retargeting">Translation Retargeting</h4>
<ul>
  <li>애니메이션은 자신의 기본 스켈레톤 Asset의 데이터를 통해 애니메이션을 수행하려한다.</li>
  <li>Retargeting 데이터를 설정해주지 않으면 애니메이션 데이터를 원래 Skeleton의 Translation data에 적용하려해 에러가 발생할 수 있다.</li>
  <li>하지만 Retargeting한 애니메이션의 경우 자신의 원래 스켈레톤이 아닌 다른 종류의 스켈레톤을 이용해 애니메이션 데이터를 생성했다.</li>
  <li>그래서 Translation Retargeting을 통해 올바른 Skeleton에 애니메이션 데이터를 적용시켜줘야한다.</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/006ef724-fc57-4078-a82d-af1de2efb51a" alt="image" /></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://lunchballer.com/archives/1741">https://lunchballer.com/archives/1741</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="Animation Retargeting" /><summary type="html"><![CDATA[개요 언리얼 마켓플레이스나 Mixamo를 둘러보다 보면 좋은 애니메이션들이 많다. 찾은 애니메이션을 다른 Skeleton에 적용시키려고하면 Skeleton이 일치하지 않아 사용할 수 없는데 Animation Retargeting은 다른 Skeleton에 애니메이션을 사용할 수 있게 만들어주는 기능이다.]]></summary></entry><entry><title type="html">[UE5] C++ 폴더 추가하는 법</title><link href="http://localhost:4000/ue5/UE5-C++-%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1%EB%B2%95/" rel="alternate" type="text/html" title="[UE5] C++ 폴더 추가하는 법" /><published>2024-05-20T00:00:00+09:00</published><updated>2024-05-20T00:00:00+09:00</updated><id>http://localhost:4000/ue5/UE5%20C++%20%ED%8F%B4%EB%8D%94%20%EC%83%9D%EC%84%B1%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/ue5/UE5-C++-%ED%8F%B4%EB%8D%94-%EC%83%9D%EC%84%B1%EB%B2%95/"><![CDATA[<h1 id="개요">개요</h1>
<p>언리얼엔진은 C++ Class 폴더가 존재한다. 이 폴더에서 프로젝트에 적용하는 모든 C++ 파일들이 들어가게 되는데 해당 폴더안에 폴더를 새로 생성하면 인식이 되지 않는 경우가 있다.</p>

<p>이를 해결하기 위해선 언리얼이 감지할 수 있게 범위를 지정해 주어야한다.</p>

<h2 id="폴더-감지-설정">폴더 감지 설정</h2>

<p>C++ 파일은 모두 All/C++Classes 폴더 아래에 생성된다.
언리얼엔진은 이 폴더안에 있는 C++ 파일은 감지하지만 안에 있는 폴더는 감지하지 못한다. 그래서 하위폴더도 감지할 수 있게 작업해 줘야한다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/26460e8d-af22-41d4-83a3-b6da36e10d42" alt="image" /></p>
<blockquote>
  <p>프로젝트이름.Build.cs 파일로 이동해서 아래 코드 사진과 같이 삽입하기
이는 이름에서 알 수 있듯이 언리얼 엔진의 Include 경로를 추가하는 코드다.</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PublicIncludePaths</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="k">new</span> <span class="n">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"StudyExample"</span> <span class="p">});</span>
</code></pre></div></div>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/0e087686-7bf8-4c2b-84aa-bd4071416da0" alt="image" /><em>코드 삽입시 모습</em></p>

<div class="callout-info-expanded">
<div class="callout-header">Build.cs 파일이 뭔가요?</div>
<p>
언리얼에는 모듈이라는 개념이 있는데 이는 언리얼 엔진의 기본 구성요소다.
모듈을 여러개로 분리한 이유는 사용하지 않는 모듈도 컴파일 하면 빌드 시간이 오래 걸리에 분리한다. 

Build.cs 파일은 이러한 모듈을 관리하는 cs파일로 모듈뿐 아니라 컴파일에 이용 하는 여러 설정을 제어한다.
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="ue5" /><category term="UE5" /><category term="Unreal Engine5" /><category term="Unreal Engine" /><category term="C++" /><summary type="html"><![CDATA[개요 언리얼엔진은 C++ Class 폴더가 존재한다. 이 폴더에서 프로젝트에 적용하는 모든 C++ 파일들이 들어가게 되는데 해당 폴더안에 폴더를 새로 생성하면 인식이 되지 않는 경우가 있다.]]></summary></entry><entry><title type="html">[Visual Studio] LNK2019 함수에서 참조되는 확인할 수 없는 외부기호</title><link href="http://localhost:4000/vs/VS-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%B0%B8%EC%A1%B0%EB%90%98%EB%8A%94-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%99%B8%EB%B6%80%EA%B8%B0%ED%98%B8/" rel="alternate" type="text/html" title="[Visual Studio] LNK2019 함수에서 참조되는 확인할 수 없는 외부기호" /><published>2024-04-19T00:00:00+09:00</published><updated>2024-04-19T00:00:00+09:00</updated><id>http://localhost:4000/vs/VS%20%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%20%EC%B0%B8%EC%A1%B0%EB%90%98%EB%8A%94%20%ED%99%95%EC%9D%B8%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EC%99%B8%EB%B6%80%EA%B8%B0%ED%98%B8</id><content type="html" xml:base="http://localhost:4000/vs/VS-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%B0%B8%EC%A1%B0%EB%90%98%EB%8A%94-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%99%B8%EB%B6%80%EA%B8%B0%ED%98%B8/"><![CDATA[<h2 id="설명">설명</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/74f27e43-22bf-4ab1-8e28-a4b93db44d36" alt="image" /></p>

<p>보통 솔류션 파일을 직접 만들어 작업하지 않고 복사 붙여넣을 때 발생하는 오류다.</p>

<h2 id="발생과정">발생과정</h2>
<ol>
  <li>MyQueue.h에 클래스 구현</li>
  <li>Alt Enter로 함수 구현 하려 했으나 h에 생성이 됨</li>
  <li>직접 cpp파일을 만들고 구현.</li>
  <li>빌드 오류</li>
</ol>

<h2 id="해결과정">해결과정</h2>
<p>아마 cpp파일을 복사 붙여넣기 하여 만든것이 원인이라 생각하여 참조 디렉터리를 확인해보기로 했다. 하지만 생각해보니 하나의 프로제그에 모두 있으므로 이 것은 아니라고 생각되었고 다른 방법을 생각했다.</p>

<p>내 문법이 이상해서 이런건가 생각하고 다른 블로그에 있는 예제들을 복사 붙여넣기해서 확인 해본 결과 선언과 구현을 h파일에서 모두 했을 경우에만 작동 되는 것을 확인했다.</p>

<p>알고보니 템플릿 클래스를 h파일, cpp파일로 나눠서 구현한 것이 문제였다.</p>

<h2 id="원인">원인</h2>
<ol>
  <li>main 함수 정의하기</li>
  <li>정의되지 않은 변수, 함수 정의하기</li>
  <li>x86, x64가 혼합되었거나 잘못 선택 되었을 경우</li>
</ol>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f5777ffe-3671-4c66-a26b-62e0bd17cee1" alt="image" /></p>
<blockquote>
  <p>빌드가 32비트인지 64비트인지 확인하기</p>
</blockquote>

<p><br /></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://davi06000.tistory.com/5">https://davi06000.tistory.com/5</a>
<a href="https://master-hun.tistory.com/121">https://master-hun.tistory.com/121</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="vs" /><category term="Visual Studio" /><category term="비쥬얼스튜디오" /><category term="LNK2019" /><category term="오류" /><summary type="html"><![CDATA[설명]]></summary></entry><entry><title type="html">[Unity] 정점이 24개인 큐브 만들기</title><link href="http://localhost:4000/unity/Unity-%EC%A0%95%EC%A0%9024%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/" rel="alternate" type="text/html" title="[Unity] 정점이 24개인 큐브 만들기" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/unity/Unity%20%EC%A0%95%EC%A0%9024%EA%B0%9C%20%ED%81%90%EB%B8%8C%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/unity/Unity-%EC%A0%95%EC%A0%9024%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/"><![CDATA[<p>지난번 <a href="https://mohitto55.github.io/unity/Unity-%EC%A0%95%EC%A0%908%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/">정점 8개 큐브 만들기</a>에 이어서 이번엔 정점24개를 가진 큐브를 만들어 볼 것이다.</p>

<h2 id="cube-작성">Cube 작성</h2>
<h3 id="정점위치-참조-테이블">정점위치 참조 테이블</h3>
<p>한 위치에 같은 정점이 3개가 만들어지는데 이 정점의 위치를 매번 계산하는 것 보단 <strong>테이블</strong>로 만들고 면이 테이블에 있는 정점 위치 정보를 가져오게 하는 것이 좋을 것이다.</p>

<p>그러기 위해선 각 면에서 사용할 정점 위치index를 지정해 줘야한다.
먼저 큐브의 각 면들의 방향을 표현한 enum을 선언한다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">enum</span> <span class="n">Direction</span>
    <span class="p">{</span>
        <span class="n">FORWARD</span><span class="p">,</span> <span class="c1">// (0, 0, 1)</span>
        <span class="n">RIGHT</span><span class="p">,</span>   <span class="c1">// (1, 0, 0)</span>
        <span class="n">UP</span><span class="p">,</span>      <span class="c1">// (0, 1, 0)</span>
        <span class="n">BACK</span><span class="p">,</span>    <span class="c1">// (0, 0, -1)</span>
        <span class="n">LEFT</span><span class="p">,</span>    <span class="c1">// (-1, 0, 0)</span>
        <span class="n">DOWN</span>     <span class="c1">// (0, -1, 0)</span>
    <span class="p">}</span>
</code></pre></div></div>

<hr />

<p>그 다음 면에서 사용하는 정점 Index를 정한다.
유니티에선 Z축이 Forward이기에 Z축 기준으로 정점을 구성해 준다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/edffa96d-8a33-44f7-ace7-f5898913d147" alt="image" /><em>vertex 순서</em></p>

<hr />

<p><strong>Direction enum</strong>에서 설계한 방향을 토대로 면의 정점을 만든다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">int</span><span class="p">[][]</span> <span class="n">faceNumber</span> <span class="p">=</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">},</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">5</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">6</span><span class="p">},</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">0</span><span class="p">},</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">},</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">1</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">2</span><span class="p">},</span>
        <span class="k">new</span> <span class="kt">int</span><span class="p">[]{</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">},</span>
    <span class="p">};</span>
</code></pre></div></div>

<hr />
<h3 id="정점-위치-테이블">정점 위치 테이블</h3>
<p>정점들의 위치 데이터를 가진 테이블을 만들어준다.
Scale을 적용하기 위해 <font color="dodgerred">아다마르 곱</font> 을 해준다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">Vector3</span> <span class="n">scale</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;</span> <span class="n">vertices</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;();</span>
    <span class="c1">// 정점들 위치 배열</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">half</span><span class="p">,</span> <span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
    <span class="n">vSet</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Scale</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">,</span> <span class="p">-</span><span class="n">half</span><span class="p">),</span> <span class="n">scale</span><span class="p">));</span>
</code></pre></div></div>

<div class="callout-info-expanded">
<div class="callout-header">아다마르 곱 (Hadamard Product)</div>
<p>
벡터와 벡터를 각 성분 끼리만 곱하는 행렬 곱이다.
</p>
</div>

<hr />

<h3 id="cube-구현">Cube 구현</h3>
<p>Cube의 면은 6개, 면에 존재하는 정점은 4개 이므로 총 24개의 정점을 만든다. 
면마다 정점이 필요한 이유는 <a href="https://mohitto55.github.io/unity/Unity-%EC%A0%95%EC%A0%908%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/">이전 포스트</a>에서도 말했다시피</p>

<p>정점 하나가 가질 수 있는 uv 정보는 1개 까지라 면 3개에 대한 정보를 가질 수 없다.
그래서 면마다 정점을 만들어주는 것이다.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">faceDir</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">faceDir</span> <span class="p">&lt;</span> <span class="m">6</span><span class="p">;</span> <span class="n">faceDir</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">faceIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">faceIndex</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">faceIndex</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">faceVertexIndex</span> <span class="p">=</span> <span class="n">faceNumber</span><span class="p">[</span><span class="n">faceDir</span><span class="p">][</span><span class="n">faceIndex</span><span class="p">];</span>
        <span class="n">vertices</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">vSet</span><span class="p">[</span><span class="n">faceVertexIndex</span><span class="p">]);</span>
    <span class="p">}</span>
</code></pre></div></div>

<hr />

<p>정점에 대응하는 uv정보와 면을 구성하는 삼각형을 그리기 위해 triangles에 정점 번호를 넣어준다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">uvs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">));</span>
    <span class="n">uvs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">));</span>
    <span class="n">uvs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">0</span><span class="p">));</span>
    <span class="n">uvs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">));</span>

    <span class="kt">int</span> <span class="n">triangleIndex</span> <span class="p">=</span> <span class="n">faceDir</span> <span class="p">*</span> <span class="m">4</span><span class="p">;</span>
    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">0</span><span class="p">);</span>
    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">3</span><span class="p">);</span>

    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">2</span><span class="p">);</span>
    <span class="n">triangles</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">triangleIndex</span> <span class="p">+</span> <span class="m">3</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>지금까지 작성한 데이터들을 Mesh로 만들어 MeshFilter에 넣어준다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Mesh</span><span class="p">();</span>
    <span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">vertices</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
    <span class="n">mesh</span><span class="p">.</span><span class="n">uv</span> <span class="p">=</span> <span class="n">uvs</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
    <span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
    <span class="n">mesh</span><span class="p">.</span><span class="nf">RecalculateBounds</span><span class="p">();</span>

    <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/f42a96ff-e563-4ba2-97e7-8c150c2e5ff4" alt="image" /><em>완성된 Cube</em></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://bloodstrawberry.tistory.com/1021">https://bloodstrawberry.tistory.com/1021</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="unity" /><category term="Unity" /><category term="Cube" /><category term="Mesh" /><summary type="html"><![CDATA[지난번 정점 8개 큐브 만들기에 이어서 이번엔 정점24개를 가진 큐브를 만들어 볼 것이다.]]></summary></entry><entry><title type="html">[Unity] 패럴씽크로 멀티플레이 게임 개발하기</title><link href="http://localhost:4000/unity/Unity-%ED%8C%A8%EB%9F%B4-%EC%8B%B1%ED%81%AC/" rel="alternate" type="text/html" title="[Unity] 패럴씽크로 멀티플레이 게임 개발하기" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/unity/Unity%20%ED%8C%A8%EB%9F%B4%20%EC%8B%B1%ED%81%AC</id><content type="html" xml:base="http://localhost:4000/unity/Unity-%ED%8C%A8%EB%9F%B4-%EC%8B%B1%ED%81%AC/"><![CDATA[<h2 id="들어가며">들어가며</h2>
<p>멀티플레이 게임을 개발할 때 가장 중요한 것 중 하나가 여러 유저의 동시 접속 기능이다.</p>

<p>예전에 멀티 게임을 구현할 때 시스템이 제대로 작동하는지 테스트하기 위해 게임을 빌드하고 직접 다운 받고 실행하는 방식으로 했었는데 시간이 매우 오래걸리고 비효율 적이였다.</p>

<p>오랜만에 다시 멀티게임을 만들게 되었는데 과거의 끔찍했던 경험을 다시 하고싶지 않아 에디터 상에서 여러화면을 띄우는 방법을 찾게되었다.</p>

<h2 id="parrelsync">ParrelSync</h2>
<ul>
  <li>패럴씽크란 에디터를 복제해 복수의 에디터를 띄울 수 있게 해주는 패키지다.</li>
  <li>이를 통해 빌드를 하지 않고 손쉽게 멀티 플레이게임을 테스트할 수 있다.</li>
</ul>

<h3 id="install">Install</h3>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/d67ea733-e603-4428-a7ff-6cb0442720fa" alt="image" /></p>

<p><a href="https://github.com/VeriorPies/ParrelSync/">ParrelSync Github</a>주소로가서 UPM Package 주소 혹은 아래 주소를 복사한다.</p>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://github.com/VeriorPies/ParrelSync.git?path=/ParrelSync
</code></pre></div></div>

<ul>
  <li>그 후 유니티로 돌아가서 UPM 매니저에 복사한 주소를 붙여넣어 설치한다.
패키지 매니저에 대한 설명은 이 <a href="https://docs.unity3d.com/kr/2020.3/Manual/upm-ui.html">링크</a>에서 확인하길 바란다.</li>
</ul>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/80755f1a-498a-4549-b2fc-edb8063ca168" alt="image" /></p>

<hr />

<ul>
  <li>설치가 완료되면 상단에 ParrelSync 탭이 생기는데 그곳에서 Clones Manager를 클릭한다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/fc40aa2b-a004-41f2-94f0-3e16130c45b3" alt="image" /></li>
</ul>

<hr />

<ul>
  <li>Colnes Manager에서 클론을 생성하면 에디터가 복제가 된것을 볼 수 있다.
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/72a2c856-adcc-4f77-87a5-db6c0671a800" alt="image" />
<img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/24476680-7589-4370-8490-90685de1588a" alt="image" /><em>복제된 에디터 화면</em></li>
</ul>

<hr />

<h3 id="다른-예제">다른 예제</h3>
<ul>
  <li>
    <p>ParrelSync도 분명 편하긴 하지만 에디터를 복제해야 할 때 시간이 걸려 유니티 내부에서 다중 클라이언트를 지원하는 기능이 있지 않을까 생각했다.</p>
  </li>
  <li>
    <p>ParrelSync 말고 다른 예제를 찾던 중 애초에 유니티 내부에서 다중 클라이언트를 구동할 수 있는 방법이 있었다. 다음에 이에 대해서 포스트를 해볼 것이다.</p>
  </li>
</ul>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://velog.io/@mkang0818/Unity-%ED%8C%A8%EB%9F%B4%EC%94%BD%ED%81%AC-%EB%A9%80%ED%8B%B0%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C-%EB%95%8C-%ED%99%94%EB%A9%B4-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EB%9D%84%EC%9A%B0%EA%B8%B0">https://velog.io/@mkang0818/Unity-%ED%8C%A8%EB%9F%B4%EC%94%BD%ED%81%AC-%EB%A9%80%ED%8B%B0%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C-%EB%95%8C-%ED%99%94%EB%A9%B4-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EB%9D%84%EC%9A%B0%EA%B8%B0</a>
<a href="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/d67ea733-e603-4428-a7ff-6cb0442720fa">https://github.com/mohitto55/mohitto55.github.io/assets/154340583/d67ea733-e603-4428-a7ff-6cb0442720fa</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="unity" /><category term="Unity" /><category term="MultiPlay" /><summary type="html"><![CDATA[들어가며 멀티플레이 게임을 개발할 때 가장 중요한 것 중 하나가 여러 유저의 동시 접속 기능이다.]]></summary></entry><entry><title type="html">[Unity] 정점이 8개인 Cube 만들기</title><link href="http://localhost:4000/unity/Unity-%EC%A0%95%EC%A0%908%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/" rel="alternate" type="text/html" title="[Unity] 정점이 8개인 Cube 만들기" /><published>2024-04-11T00:00:00+09:00</published><updated>2024-04-11T00:00:00+09:00</updated><id>http://localhost:4000/unity/Unity%20%EC%A0%95%EC%A0%908%EA%B0%9C%20%ED%81%90%EB%B8%8C%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/unity/Unity-%EC%A0%95%EC%A0%908%EA%B0%9C-%ED%81%90%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/"><![CDATA[<p>유니티 큐브의 정점갯수는 기본적으로 24개다.</p>

<p>정점 8개만 이용해도 큐브를 만들 수 있지 않나 싶어서 만들어보았다.</p>

<h2 id="cube-만들기">Cube 만들기</h2>
<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/13883c6d-2d30-4f2f-914c-f380fcf18748" alt="image" /><em>vertex 순서</em></p>

<p>우선 정점을 만들어준다. 정점의 순서는 위와 같이 정했으며 이를 구현한다.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">float</span> <span class="n">halfWidth</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">halfHeight</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;</span> <span class="n">vertexs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;();</span>

    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
    <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
</code></pre></div></div>

<hr />
<p>vertex 정보를 토대로 triangle를 지정하여준다.
방향은 시계방향으로 해야 큐브 바깥쪽 방향으로 메쉬가 생성된다.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">triangles</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span>
    <span class="p">{</span>
        <span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span>
        <span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">4</span><span class="p">,</span>
        <span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span>
        <span class="m">6</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">,</span>
        <span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span>
        <span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">4</span>
    <span class="p">};</span>
</code></pre></div></div>

<p>이렇게 생성한 정보를 토대로 Mesh에 옮겨준다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">vertexs</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
    <span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>

    <span class="n">mesh</span><span class="p">.</span><span class="nf">RecalculateBounds</span><span class="p">();</span>
    <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="전체-코드">전체 코드</h3>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">void</span> <span class="nf">GenerateCube</span><span class="p">(</span><span class="kt">float</span> <span class="n">width</span><span class="p">,</span> <span class="kt">float</span> <span class="n">height</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Mesh</span> <span class="n">mesh</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Mesh</span><span class="p">();</span>

        <span class="kt">float</span> <span class="n">halfWidth</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
        <span class="kt">float</span> <span class="n">halfHeight</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;</span> <span class="n">vertexs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector3</span><span class="p">&gt;();</span>

        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(-</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="p">-</span><span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="n">halfWidth</span><span class="p">));</span>
        <span class="n">vertexs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">halfWidth</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">,</span> <span class="p">-</span><span class="n">halfWidth</span><span class="p">));</span>

        <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector2</span><span class="p">&gt;</span> <span class="n">uvs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector2</span><span class="p">&gt;</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">1f</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">0f</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">1f</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">0f</span><span class="p">)</span>
        <span class="p">};</span>

        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">triangles</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span>
        <span class="p">{</span>
            <span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span>
            <span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">4</span><span class="p">,</span>
            <span class="m">7</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">,</span>
            <span class="m">6</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">,</span>
            <span class="m">6</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">3</span><span class="p">,</span>
            <span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">4</span>
        <span class="p">};</span>
        
        <span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">vertexs</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
        <span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>

        <span class="n">mesh</span><span class="p">.</span><span class="nf">RecalculateBounds</span><span class="p">();</span>
        <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">MeshFilter</span><span class="p">&gt;().</span><span class="n">mesh</span> <span class="p">=</span> <span class="n">mesh</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/aa900bc4-c0f5-4a9d-a086-4816e876855e" alt="image" /><em>완성된 정점8개 큐브</em></p>

<h2 id="단점">단점</h2>
<p>정점 8개만 있어도 큐브를 만들 수 있지만 문제는 uv를 통한 라이팅과 Material 표현이 불가능했다.</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector2</span><span class="p">&gt;</span> <span class="n">uvs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Vector2</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">1f</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">0f</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">1f</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">1f</span><span class="p">,</span><span class="m">0f</span><span class="p">)</span>
    <span class="p">};</span>
</code></pre></div></div>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/5cb348fc-4c48-490f-bc7f-2cbdfb9a1f93" alt="image" /><em>깨져버린 Material</em></p>

<hr />

<h3 id="원인">원인</h3>
<p>이는 uv하나가 표현해야할 면이 3개이지만 1개를 초과하는 정보를 담당할 수 없기 떄문이다. 각 면마다 사용해야할 uv 정보가 다 다른데 겹쳐서 저렇게 깨져버린 것이다.</p>

<p>그래서 유니티에선 정점을 24개로 구현해 각 면마다 사용할 uv정보를 담아주었다.</p>

<p><img src="https://github.com/mohitto55/mohitto55.github.io/assets/154340583/5e4a0aa5-69de-44e6-9cdf-8c9c913cd856" alt="image" /><em>유니티 Cube</em></p>

<div class="Reference">
<div class="callout-header"> </div>
<p>
<a href="https://bloodstrawberry.tistory.com/1016">https://bloodstrawberry.tistory.com/1016</a>
</p>
</div>]]></content><author><name>Mohitto55</name></author><category term="unity" /><category term="Unity" /><category term="Mesh" /><category term="Cube" /><category term="UV" /><summary type="html"><![CDATA[유니티 큐브의 정점갯수는 기본적으로 24개다.]]></summary></entry></feed>